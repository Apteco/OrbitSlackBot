/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Apteco.OrbitSlackBot.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitSlackBot.ApiClient.Model
{
    /// <summary>
    /// Per-response type, per-channel response data
    /// </summary>
    [DataContract]
    public partial class PerResponseTypePerChannelStatistics :  IEquatable<PerResponseTypePerChannelStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerResponseTypePerChannelStatistics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PerResponseTypePerChannelStatistics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PerResponseTypePerChannelStatistics" /> class.
        /// </summary>
        /// <param name="ResponsesCounts">The set of counts representing the number of responses for the corresponding response type and channel.  The first figure is data for the first day in the days list in the parent object, and so on. (required).</param>
        /// <param name="TotalResponsesCount">The total number of responses for the given response type and channel (required).</param>
        public PerResponseTypePerChannelStatistics(List<long?> ResponsesCounts = default(List<long?>), long? TotalResponsesCount = default(long?))
        {
            // to ensure "ResponsesCounts" is required (not null)
            if (ResponsesCounts == null)
            {
                throw new InvalidDataException("ResponsesCounts is a required property for PerResponseTypePerChannelStatistics and cannot be null");
            }
            else
            {
                this.ResponsesCounts = ResponsesCounts;
            }
            // to ensure "TotalResponsesCount" is required (not null)
            if (TotalResponsesCount == null)
            {
                throw new InvalidDataException("TotalResponsesCount is a required property for PerResponseTypePerChannelStatistics and cannot be null");
            }
            else
            {
                this.TotalResponsesCount = TotalResponsesCount;
            }
        }
        
        /// <summary>
        /// The set of counts representing the number of responses for the corresponding response type and channel.  The first figure is data for the first day in the days list in the parent object, and so on.
        /// </summary>
        /// <value>The set of counts representing the number of responses for the corresponding response type and channel.  The first figure is data for the first day in the days list in the parent object, and so on.</value>
        [DataMember(Name="responsesCounts", EmitDefaultValue=false)]
        public List<long?> ResponsesCounts { get; set; }

        /// <summary>
        /// The total number of responses for the given response type and channel
        /// </summary>
        /// <value>The total number of responses for the given response type and channel</value>
        [DataMember(Name="totalResponsesCount", EmitDefaultValue=false)]
        public long? TotalResponsesCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerResponseTypePerChannelStatistics {\n");
            sb.Append("  ResponsesCounts: ").Append(ResponsesCounts).Append("\n");
            sb.Append("  TotalResponsesCount: ").Append(TotalResponsesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerResponseTypePerChannelStatistics);
        }

        /// <summary>
        /// Returns true if PerResponseTypePerChannelStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of PerResponseTypePerChannelStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerResponseTypePerChannelStatistics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponsesCounts == input.ResponsesCounts ||
                    this.ResponsesCounts != null &&
                    this.ResponsesCounts.SequenceEqual(input.ResponsesCounts)
                ) && 
                (
                    this.TotalResponsesCount == input.TotalResponsesCount ||
                    (this.TotalResponsesCount != null &&
                    this.TotalResponsesCount.Equals(input.TotalResponsesCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponsesCounts != null)
                    hashCode = hashCode * 59 + this.ResponsesCounts.GetHashCode();
                if (this.TotalResponsesCount != null)
                    hashCode = hashCode * 59 + this.TotalResponsesCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
