/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Apteco.OrbitSlackBot.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitSlackBot.ApiClient.Model
{
    /// <summary>
    /// Summary of a user registration request
    /// </summary>
    [DataContract]
    public partial class UserRegistrationRequestSummary :  IEquatable<UserRegistrationRequestSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationRequestSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserRegistrationRequestSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationRequestSummary" /> class.
        /// </summary>
        /// <param name="Token">The token for this registration request (required).</param>
        /// <param name="Username">The requested username (required).</param>
        /// <param name="Firstname">The requested first name.</param>
        /// <param name="Surname">The requested surname.</param>
        /// <param name="EmailAddress">The requested email address (required).</param>
        /// <param name="CreationDate">The date and time this request was created (required).</param>
        /// <param name="ConfirmedDate">The date and time this request was confirmed.</param>
        /// <param name="ExpiredDate">The date and time this request expired.</param>
        public UserRegistrationRequestSummary(Guid? Token = default(Guid?), string Username = default(string), string Firstname = default(string), string Surname = default(string), string EmailAddress = default(string), DateTime? CreationDate = default(DateTime?), DateTime? ConfirmedDate = default(DateTime?), DateTime? ExpiredDate = default(DateTime?))
        {
            // to ensure "Token" is required (not null)
            if (Token == null)
            {
                throw new InvalidDataException("Token is a required property for UserRegistrationRequestSummary and cannot be null");
            }
            else
            {
                this.Token = Token;
            }
            // to ensure "Username" is required (not null)
            if (Username == null)
            {
                throw new InvalidDataException("Username is a required property for UserRegistrationRequestSummary and cannot be null");
            }
            else
            {
                this.Username = Username;
            }
            // to ensure "EmailAddress" is required (not null)
            if (EmailAddress == null)
            {
                throw new InvalidDataException("EmailAddress is a required property for UserRegistrationRequestSummary and cannot be null");
            }
            else
            {
                this.EmailAddress = EmailAddress;
            }
            // to ensure "CreationDate" is required (not null)
            if (CreationDate == null)
            {
                throw new InvalidDataException("CreationDate is a required property for UserRegistrationRequestSummary and cannot be null");
            }
            else
            {
                this.CreationDate = CreationDate;
            }
            this.Firstname = Firstname;
            this.Surname = Surname;
            this.ConfirmedDate = ConfirmedDate;
            this.ExpiredDate = ExpiredDate;
        }
        
        /// <summary>
        /// The token for this registration request
        /// </summary>
        /// <value>The token for this registration request</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public Guid? Token { get; set; }

        /// <summary>
        /// The requested username
        /// </summary>
        /// <value>The requested username</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// The requested first name
        /// </summary>
        /// <value>The requested first name</value>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// The requested surname
        /// </summary>
        /// <value>The requested surname</value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// The requested email address
        /// </summary>
        /// <value>The requested email address</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The date and time this request was created
        /// </summary>
        /// <value>The date and time this request was created</value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// The date and time this request was confirmed
        /// </summary>
        /// <value>The date and time this request was confirmed</value>
        [DataMember(Name="confirmedDate", EmitDefaultValue=false)]
        public DateTime? ConfirmedDate { get; set; }

        /// <summary>
        /// The date and time this request expired
        /// </summary>
        /// <value>The date and time this request expired</value>
        [DataMember(Name="expiredDate", EmitDefaultValue=false)]
        public DateTime? ExpiredDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRegistrationRequestSummary {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  ConfirmedDate: ").Append(ConfirmedDate).Append("\n");
            sb.Append("  ExpiredDate: ").Append(ExpiredDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRegistrationRequestSummary);
        }

        /// <summary>
        /// Returns true if UserRegistrationRequestSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRegistrationRequestSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRegistrationRequestSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.ConfirmedDate == input.ConfirmedDate ||
                    (this.ConfirmedDate != null &&
                    this.ConfirmedDate.Equals(input.ConfirmedDate))
                ) && 
                (
                    this.ExpiredDate == input.ExpiredDate ||
                    (this.ExpiredDate != null &&
                    this.ExpiredDate.Equals(input.ExpiredDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.ConfirmedDate != null)
                    hashCode = hashCode * 59 + this.ConfirmedDate.GetHashCode();
                if (this.ExpiredDate != null)
                    hashCode = hashCode * 59 + this.ExpiredDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
