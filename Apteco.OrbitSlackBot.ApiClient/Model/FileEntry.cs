/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Apteco.OrbitSlackBot.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitSlackBot.ApiClient.Model
{
    /// <summary>
    /// Details for a visualisation
    /// </summary>
    [DataContract]
    public partial class FileEntry :  IEquatable<FileEntry>, IValidatableObject
    {
        /// <summary>
        /// The visualisation&#39;s type
        /// </summary>
        /// <value>The visualisation&#39;s type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            
            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 2,
            
            /// <summary>
            /// Enum Directory for value: Directory
            /// </summary>
            [EnumMember(Value = "Directory")]
            Directory = 3,
            
            /// <summary>
            /// Enum Chart for value: Chart
            /// </summary>
            [EnumMember(Value = "Chart")]
            Chart = 4,
            
            /// <summary>
            /// Enum Cluster for value: Cluster
            /// </summary>
            [EnumMember(Value = "Cluster")]
            Cluster = 5,
            
            /// <summary>
            /// Enum Map for value: Map
            /// </summary>
            [EnumMember(Value = "Map")]
            Map = 6,
            
            /// <summary>
            /// Enum Cube for value: Cube
            /// </summary>
            [EnumMember(Value = "Cube")]
            Cube = 7,
            
            /// <summary>
            /// Enum Tree for value: Tree
            /// </summary>
            [EnumMember(Value = "Tree")]
            Tree = 8,
            
            /// <summary>
            /// Enum Venn for value: Venn
            /// </summary>
            [EnumMember(Value = "Venn")]
            Venn = 9,
            
            /// <summary>
            /// Enum DataGrid for value: DataGrid
            /// </summary>
            [EnumMember(Value = "DataGrid")]
            DataGrid = 10,
            
            /// <summary>
            /// Enum DecisionTree for value: DecisionTree
            /// </summary>
            [EnumMember(Value = "DecisionTree")]
            DecisionTree = 11,
            
            /// <summary>
            /// Enum Expression for value: Expression
            /// </summary>
            [EnumMember(Value = "Expression")]
            Expression = 12,
            
            /// <summary>
            /// Enum ModellingEnvironment for value: ModellingEnvironment
            /// </summary>
            [EnumMember(Value = "ModellingEnvironment")]
            ModellingEnvironment = 13,
            
            /// <summary>
            /// Enum ModelReport for value: ModelReport
            /// </summary>
            [EnumMember(Value = "ModelReport")]
            ModelReport = 14,
            
            /// <summary>
            /// Enum Profile for value: Profile
            /// </summary>
            [EnumMember(Value = "Profile")]
            Profile = 15,
            
            /// <summary>
            /// Enum Report for value: Report
            /// </summary>
            [EnumMember(Value = "Report")]
            Report = 16,
            
            /// <summary>
            /// Enum Segmentation for value: Segmentation
            /// </summary>
            [EnumMember(Value = "Segmentation")]
            Segmentation = 17,
            
            /// <summary>
            /// Enum Selection for value: Selection
            /// </summary>
            [EnumMember(Value = "Selection")]
            Selection = 18,
            
            /// <summary>
            /// Enum Storyboard for value: Storyboard
            /// </summary>
            [EnumMember(Value = "Storyboard")]
            Storyboard = 19,
            
            /// <summary>
            /// Enum WordCloud for value: WordCloud
            /// </summary>
            [EnumMember(Value = "WordCloud")]
            WordCloud = 20
        }

        /// <summary>
        /// The visualisation&#39;s type
        /// </summary>
        /// <value>The visualisation&#39;s type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileEntry" /> class.
        /// </summary>
        /// <param name="Name">The file entry&#39;s name (required).</param>
        /// <param name="Type">The visualisation&#39;s type (required).</param>
        public FileEntry(string Name = default(string), TypeEnum Type = default(TypeEnum))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for FileEntry and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for FileEntry and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
        }
        
        /// <summary>
        /// The file entry&#39;s name
        /// </summary>
        /// <value>The file entry&#39;s name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileEntry {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileEntry);
        }

        /// <summary>
        /// Returns true if FileEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of FileEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
