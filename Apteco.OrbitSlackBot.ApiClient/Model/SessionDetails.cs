/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Apteco.OrbitSlackBot.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitSlackBot.ApiClient.Model
{
    /// <summary>
    /// The details for a newly created session
    /// </summary>
    [DataContract]
    public partial class SessionDetails :  IEquatable<SessionDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SessionDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionDetails" /> class.
        /// </summary>
        /// <param name="AccessToken">The access token that needs to be included when making requests that require authentication (required).</param>
        /// <param name="User">Details of the user associated with this current session (required).</param>
        /// <param name="SessionId">The id for this current session (required).</param>
        public SessionDetails(string AccessToken = default(string), UserDisplayDetails User = default(UserDisplayDetails), string SessionId = default(string))
        {
            // to ensure "AccessToken" is required (not null)
            if (AccessToken == null)
            {
                throw new InvalidDataException("AccessToken is a required property for SessionDetails and cannot be null");
            }
            else
            {
                this.AccessToken = AccessToken;
            }
            // to ensure "User" is required (not null)
            if (User == null)
            {
                throw new InvalidDataException("User is a required property for SessionDetails and cannot be null");
            }
            else
            {
                this.User = User;
            }
            // to ensure "SessionId" is required (not null)
            if (SessionId == null)
            {
                throw new InvalidDataException("SessionId is a required property for SessionDetails and cannot be null");
            }
            else
            {
                this.SessionId = SessionId;
            }
        }
        
        /// <summary>
        /// The access token that needs to be included when making requests that require authentication
        /// </summary>
        /// <value>The access token that needs to be included when making requests that require authentication</value>
        [DataMember(Name="accessToken", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Details of the user associated with this current session
        /// </summary>
        /// <value>Details of the user associated with this current session</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserDisplayDetails User { get; set; }

        /// <summary>
        /// The id for this current session
        /// </summary>
        /// <value>The id for this current session</value>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionDetails {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionDetails);
        }

        /// <summary>
        /// Returns true if SessionDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
