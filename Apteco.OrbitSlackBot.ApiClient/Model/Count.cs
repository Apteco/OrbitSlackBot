/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Apteco.OrbitSlackBot.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitSlackBot.ApiClient.Model
{
    /// <summary>
    /// Details for a count of records from a particular table
    /// </summary>
    [DataContract]
    public partial class Count :  IEquatable<Count>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Count" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Count() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Count" /> class.
        /// </summary>
        /// <param name="TableName">The name of the table that the count comes from (required).</param>
        /// <param name="TableDescription">The description of the table that the count comes from (required).</param>
        /// <param name="CountValue">The count of the number of records selected on this table (required).</param>
        public Count(string TableName = default(string), string TableDescription = default(string), long? CountValue = default(long?))
        {
            // to ensure "TableName" is required (not null)
            if (TableName == null)
            {
                throw new InvalidDataException("TableName is a required property for Count and cannot be null");
            }
            else
            {
                this.TableName = TableName;
            }
            // to ensure "TableDescription" is required (not null)
            if (TableDescription == null)
            {
                throw new InvalidDataException("TableDescription is a required property for Count and cannot be null");
            }
            else
            {
                this.TableDescription = TableDescription;
            }
            // to ensure "CountValue" is required (not null)
            if (CountValue == null)
            {
                throw new InvalidDataException("CountValue is a required property for Count and cannot be null");
            }
            else
            {
                this.CountValue = CountValue;
            }
        }
        
        /// <summary>
        /// The name of the table that the count comes from
        /// </summary>
        /// <value>The name of the table that the count comes from</value>
        [DataMember(Name="tableName", EmitDefaultValue=false)]
        public string TableName { get; set; }

        /// <summary>
        /// The description of the table that the count comes from
        /// </summary>
        /// <value>The description of the table that the count comes from</value>
        [DataMember(Name="tableDescription", EmitDefaultValue=false)]
        public string TableDescription { get; set; }

        /// <summary>
        /// The count of the number of records selected on this table
        /// </summary>
        /// <value>The count of the number of records selected on this table</value>
        [DataMember(Name="countValue", EmitDefaultValue=false)]
        public long? CountValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Count {\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  TableDescription: ").Append(TableDescription).Append("\n");
            sb.Append("  CountValue: ").Append(CountValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Count);
        }

        /// <summary>
        /// Returns true if Count instances are equal
        /// </summary>
        /// <param name="input">Instance of Count to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Count input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TableName == input.TableName ||
                    (this.TableName != null &&
                    this.TableName.Equals(input.TableName))
                ) && 
                (
                    this.TableDescription == input.TableDescription ||
                    (this.TableDescription != null &&
                    this.TableDescription.Equals(input.TableDescription))
                ) && 
                (
                    this.CountValue == input.CountValue ||
                    (this.CountValue != null &&
                    this.CountValue.Equals(input.CountValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TableName != null)
                    hashCode = hashCode * 59 + this.TableName.GetHashCode();
                if (this.TableDescription != null)
                    hashCode = hashCode * 59 + this.TableDescription.GetHashCode();
                if (this.CountValue != null)
                    hashCode = hashCode * 59 + this.CountValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
