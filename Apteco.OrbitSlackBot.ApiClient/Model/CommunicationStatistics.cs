/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Apteco.OrbitSlackBot.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitSlackBot.ApiClient.Model
{
    /// <summary>
    /// Communication statistics for a given set of days
    /// </summary>
    [DataContract]
    public partial class CommunicationStatistics :  IEquatable<CommunicationStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationStatistics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommunicationStatistics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationStatistics" /> class.
        /// </summary>
        /// <param name="Days">The set of days where communication information is available (required).</param>
        /// <param name="CommunicationsCounts">The set of counts representing the number of communications on the corresponding day.  The first figure is data for the first day in the Days list, and so on. (required).</param>
        /// <param name="TotalCommunicationsCount">The total number of communications across all days (required).</param>
        /// <param name="DeliveriesCounts">The set of counts representing the number of deliveries that have run on the corresponding day.  The first figure is data for the first day in the Days list, and so on. (required).</param>
        /// <param name="TotalDeliveriesCount">The total number of deliveries that have run across all days (required).</param>
        /// <param name="MessagesCounts">The set of counts representing the number of messages that have had at least one delivery run on the corresponding day.  The first figure is data for the first day in the Days list, and so on. (required).</param>
        /// <param name="TotalMessagesCount">The total number of messages that have had at least one delivery run across all days (required).</param>
        /// <param name="CampaignsCounts">The set of counts representing the number of campaigns that have had at least one delivery run on the corresponding day.  The first figure is data for the first day in the Days list, and so on. (required).</param>
        /// <param name="TotalCampaignsCount">The total number of campaigns that have had at least one delivery run across all days (required).</param>
        /// <param name="PeopleCounts">The set of counts representing the number of unique people processed on the corresponding day.  The first figure is data for the first day in the Days list, and so on. (required).</param>
        /// <param name="CommunicationStatisticsTimestamp">The date and time that the communication statistics were calculated.</param>
        /// <param name="CampaignStatisticsTimestamp">The date and time that the delivery, message and campaign statistics were calculated.</param>
        /// <param name="PeopleStatisticsTimestamp">The date and time that the people statistics were calculated.</param>
        public CommunicationStatistics(List<string> Days = default(List<string>), List<long?> CommunicationsCounts = default(List<long?>), long? TotalCommunicationsCount = default(long?), List<long?> DeliveriesCounts = default(List<long?>), long? TotalDeliveriesCount = default(long?), List<long?> MessagesCounts = default(List<long?>), long? TotalMessagesCount = default(long?), List<long?> CampaignsCounts = default(List<long?>), long? TotalCampaignsCount = default(long?), List<long?> PeopleCounts = default(List<long?>), DateTime? CommunicationStatisticsTimestamp = default(DateTime?), DateTime? CampaignStatisticsTimestamp = default(DateTime?), DateTime? PeopleStatisticsTimestamp = default(DateTime?))
        {
            // to ensure "Days" is required (not null)
            if (Days == null)
            {
                throw new InvalidDataException("Days is a required property for CommunicationStatistics and cannot be null");
            }
            else
            {
                this.Days = Days;
            }
            // to ensure "CommunicationsCounts" is required (not null)
            if (CommunicationsCounts == null)
            {
                throw new InvalidDataException("CommunicationsCounts is a required property for CommunicationStatistics and cannot be null");
            }
            else
            {
                this.CommunicationsCounts = CommunicationsCounts;
            }
            // to ensure "TotalCommunicationsCount" is required (not null)
            if (TotalCommunicationsCount == null)
            {
                throw new InvalidDataException("TotalCommunicationsCount is a required property for CommunicationStatistics and cannot be null");
            }
            else
            {
                this.TotalCommunicationsCount = TotalCommunicationsCount;
            }
            // to ensure "DeliveriesCounts" is required (not null)
            if (DeliveriesCounts == null)
            {
                throw new InvalidDataException("DeliveriesCounts is a required property for CommunicationStatistics and cannot be null");
            }
            else
            {
                this.DeliveriesCounts = DeliveriesCounts;
            }
            // to ensure "TotalDeliveriesCount" is required (not null)
            if (TotalDeliveriesCount == null)
            {
                throw new InvalidDataException("TotalDeliveriesCount is a required property for CommunicationStatistics and cannot be null");
            }
            else
            {
                this.TotalDeliveriesCount = TotalDeliveriesCount;
            }
            // to ensure "MessagesCounts" is required (not null)
            if (MessagesCounts == null)
            {
                throw new InvalidDataException("MessagesCounts is a required property for CommunicationStatistics and cannot be null");
            }
            else
            {
                this.MessagesCounts = MessagesCounts;
            }
            // to ensure "TotalMessagesCount" is required (not null)
            if (TotalMessagesCount == null)
            {
                throw new InvalidDataException("TotalMessagesCount is a required property for CommunicationStatistics and cannot be null");
            }
            else
            {
                this.TotalMessagesCount = TotalMessagesCount;
            }
            // to ensure "CampaignsCounts" is required (not null)
            if (CampaignsCounts == null)
            {
                throw new InvalidDataException("CampaignsCounts is a required property for CommunicationStatistics and cannot be null");
            }
            else
            {
                this.CampaignsCounts = CampaignsCounts;
            }
            // to ensure "TotalCampaignsCount" is required (not null)
            if (TotalCampaignsCount == null)
            {
                throw new InvalidDataException("TotalCampaignsCount is a required property for CommunicationStatistics and cannot be null");
            }
            else
            {
                this.TotalCampaignsCount = TotalCampaignsCount;
            }
            // to ensure "PeopleCounts" is required (not null)
            if (PeopleCounts == null)
            {
                throw new InvalidDataException("PeopleCounts is a required property for CommunicationStatistics and cannot be null");
            }
            else
            {
                this.PeopleCounts = PeopleCounts;
            }
            this.CommunicationStatisticsTimestamp = CommunicationStatisticsTimestamp;
            this.CampaignStatisticsTimestamp = CampaignStatisticsTimestamp;
            this.PeopleStatisticsTimestamp = PeopleStatisticsTimestamp;
        }
        
        /// <summary>
        /// The set of days where communication information is available
        /// </summary>
        /// <value>The set of days where communication information is available</value>
        [DataMember(Name="days", EmitDefaultValue=false)]
        public List<string> Days { get; set; }

        /// <summary>
        /// The set of counts representing the number of communications on the corresponding day.  The first figure is data for the first day in the Days list, and so on.
        /// </summary>
        /// <value>The set of counts representing the number of communications on the corresponding day.  The first figure is data for the first day in the Days list, and so on.</value>
        [DataMember(Name="communicationsCounts", EmitDefaultValue=false)]
        public List<long?> CommunicationsCounts { get; set; }

        /// <summary>
        /// The total number of communications across all days
        /// </summary>
        /// <value>The total number of communications across all days</value>
        [DataMember(Name="totalCommunicationsCount", EmitDefaultValue=false)]
        public long? TotalCommunicationsCount { get; set; }

        /// <summary>
        /// The set of counts representing the number of deliveries that have run on the corresponding day.  The first figure is data for the first day in the Days list, and so on.
        /// </summary>
        /// <value>The set of counts representing the number of deliveries that have run on the corresponding day.  The first figure is data for the first day in the Days list, and so on.</value>
        [DataMember(Name="deliveriesCounts", EmitDefaultValue=false)]
        public List<long?> DeliveriesCounts { get; set; }

        /// <summary>
        /// The total number of deliveries that have run across all days
        /// </summary>
        /// <value>The total number of deliveries that have run across all days</value>
        [DataMember(Name="totalDeliveriesCount", EmitDefaultValue=false)]
        public long? TotalDeliveriesCount { get; set; }

        /// <summary>
        /// The set of counts representing the number of messages that have had at least one delivery run on the corresponding day.  The first figure is data for the first day in the Days list, and so on.
        /// </summary>
        /// <value>The set of counts representing the number of messages that have had at least one delivery run on the corresponding day.  The first figure is data for the first day in the Days list, and so on.</value>
        [DataMember(Name="messagesCounts", EmitDefaultValue=false)]
        public List<long?> MessagesCounts { get; set; }

        /// <summary>
        /// The total number of messages that have had at least one delivery run across all days
        /// </summary>
        /// <value>The total number of messages that have had at least one delivery run across all days</value>
        [DataMember(Name="totalMessagesCount", EmitDefaultValue=false)]
        public long? TotalMessagesCount { get; set; }

        /// <summary>
        /// The set of counts representing the number of campaigns that have had at least one delivery run on the corresponding day.  The first figure is data for the first day in the Days list, and so on.
        /// </summary>
        /// <value>The set of counts representing the number of campaigns that have had at least one delivery run on the corresponding day.  The first figure is data for the first day in the Days list, and so on.</value>
        [DataMember(Name="campaignsCounts", EmitDefaultValue=false)]
        public List<long?> CampaignsCounts { get; set; }

        /// <summary>
        /// The total number of campaigns that have had at least one delivery run across all days
        /// </summary>
        /// <value>The total number of campaigns that have had at least one delivery run across all days</value>
        [DataMember(Name="totalCampaignsCount", EmitDefaultValue=false)]
        public long? TotalCampaignsCount { get; set; }

        /// <summary>
        /// The set of counts representing the number of unique people processed on the corresponding day.  The first figure is data for the first day in the Days list, and so on.
        /// </summary>
        /// <value>The set of counts representing the number of unique people processed on the corresponding day.  The first figure is data for the first day in the Days list, and so on.</value>
        [DataMember(Name="peopleCounts", EmitDefaultValue=false)]
        public List<long?> PeopleCounts { get; set; }

        /// <summary>
        /// The date and time that the communication statistics were calculated
        /// </summary>
        /// <value>The date and time that the communication statistics were calculated</value>
        [DataMember(Name="communicationStatisticsTimestamp", EmitDefaultValue=false)]
        public DateTime? CommunicationStatisticsTimestamp { get; set; }

        /// <summary>
        /// The date and time that the delivery, message and campaign statistics were calculated
        /// </summary>
        /// <value>The date and time that the delivery, message and campaign statistics were calculated</value>
        [DataMember(Name="campaignStatisticsTimestamp", EmitDefaultValue=false)]
        public DateTime? CampaignStatisticsTimestamp { get; set; }

        /// <summary>
        /// The date and time that the people statistics were calculated
        /// </summary>
        /// <value>The date and time that the people statistics were calculated</value>
        [DataMember(Name="peopleStatisticsTimestamp", EmitDefaultValue=false)]
        public DateTime? PeopleStatisticsTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommunicationStatistics {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  CommunicationsCounts: ").Append(CommunicationsCounts).Append("\n");
            sb.Append("  TotalCommunicationsCount: ").Append(TotalCommunicationsCount).Append("\n");
            sb.Append("  DeliveriesCounts: ").Append(DeliveriesCounts).Append("\n");
            sb.Append("  TotalDeliveriesCount: ").Append(TotalDeliveriesCount).Append("\n");
            sb.Append("  MessagesCounts: ").Append(MessagesCounts).Append("\n");
            sb.Append("  TotalMessagesCount: ").Append(TotalMessagesCount).Append("\n");
            sb.Append("  CampaignsCounts: ").Append(CampaignsCounts).Append("\n");
            sb.Append("  TotalCampaignsCount: ").Append(TotalCampaignsCount).Append("\n");
            sb.Append("  PeopleCounts: ").Append(PeopleCounts).Append("\n");
            sb.Append("  CommunicationStatisticsTimestamp: ").Append(CommunicationStatisticsTimestamp).Append("\n");
            sb.Append("  CampaignStatisticsTimestamp: ").Append(CampaignStatisticsTimestamp).Append("\n");
            sb.Append("  PeopleStatisticsTimestamp: ").Append(PeopleStatisticsTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommunicationStatistics);
        }

        /// <summary>
        /// Returns true if CommunicationStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of CommunicationStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommunicationStatistics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Days == input.Days ||
                    this.Days != null &&
                    this.Days.SequenceEqual(input.Days)
                ) && 
                (
                    this.CommunicationsCounts == input.CommunicationsCounts ||
                    this.CommunicationsCounts != null &&
                    this.CommunicationsCounts.SequenceEqual(input.CommunicationsCounts)
                ) && 
                (
                    this.TotalCommunicationsCount == input.TotalCommunicationsCount ||
                    (this.TotalCommunicationsCount != null &&
                    this.TotalCommunicationsCount.Equals(input.TotalCommunicationsCount))
                ) && 
                (
                    this.DeliveriesCounts == input.DeliveriesCounts ||
                    this.DeliveriesCounts != null &&
                    this.DeliveriesCounts.SequenceEqual(input.DeliveriesCounts)
                ) && 
                (
                    this.TotalDeliveriesCount == input.TotalDeliveriesCount ||
                    (this.TotalDeliveriesCount != null &&
                    this.TotalDeliveriesCount.Equals(input.TotalDeliveriesCount))
                ) && 
                (
                    this.MessagesCounts == input.MessagesCounts ||
                    this.MessagesCounts != null &&
                    this.MessagesCounts.SequenceEqual(input.MessagesCounts)
                ) && 
                (
                    this.TotalMessagesCount == input.TotalMessagesCount ||
                    (this.TotalMessagesCount != null &&
                    this.TotalMessagesCount.Equals(input.TotalMessagesCount))
                ) && 
                (
                    this.CampaignsCounts == input.CampaignsCounts ||
                    this.CampaignsCounts != null &&
                    this.CampaignsCounts.SequenceEqual(input.CampaignsCounts)
                ) && 
                (
                    this.TotalCampaignsCount == input.TotalCampaignsCount ||
                    (this.TotalCampaignsCount != null &&
                    this.TotalCampaignsCount.Equals(input.TotalCampaignsCount))
                ) && 
                (
                    this.PeopleCounts == input.PeopleCounts ||
                    this.PeopleCounts != null &&
                    this.PeopleCounts.SequenceEqual(input.PeopleCounts)
                ) && 
                (
                    this.CommunicationStatisticsTimestamp == input.CommunicationStatisticsTimestamp ||
                    (this.CommunicationStatisticsTimestamp != null &&
                    this.CommunicationStatisticsTimestamp.Equals(input.CommunicationStatisticsTimestamp))
                ) && 
                (
                    this.CampaignStatisticsTimestamp == input.CampaignStatisticsTimestamp ||
                    (this.CampaignStatisticsTimestamp != null &&
                    this.CampaignStatisticsTimestamp.Equals(input.CampaignStatisticsTimestamp))
                ) && 
                (
                    this.PeopleStatisticsTimestamp == input.PeopleStatisticsTimestamp ||
                    (this.PeopleStatisticsTimestamp != null &&
                    this.PeopleStatisticsTimestamp.Equals(input.PeopleStatisticsTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Days != null)
                    hashCode = hashCode * 59 + this.Days.GetHashCode();
                if (this.CommunicationsCounts != null)
                    hashCode = hashCode * 59 + this.CommunicationsCounts.GetHashCode();
                if (this.TotalCommunicationsCount != null)
                    hashCode = hashCode * 59 + this.TotalCommunicationsCount.GetHashCode();
                if (this.DeliveriesCounts != null)
                    hashCode = hashCode * 59 + this.DeliveriesCounts.GetHashCode();
                if (this.TotalDeliveriesCount != null)
                    hashCode = hashCode * 59 + this.TotalDeliveriesCount.GetHashCode();
                if (this.MessagesCounts != null)
                    hashCode = hashCode * 59 + this.MessagesCounts.GetHashCode();
                if (this.TotalMessagesCount != null)
                    hashCode = hashCode * 59 + this.TotalMessagesCount.GetHashCode();
                if (this.CampaignsCounts != null)
                    hashCode = hashCode * 59 + this.CampaignsCounts.GetHashCode();
                if (this.TotalCampaignsCount != null)
                    hashCode = hashCode * 59 + this.TotalCampaignsCount.GetHashCode();
                if (this.PeopleCounts != null)
                    hashCode = hashCode * 59 + this.PeopleCounts.GetHashCode();
                if (this.CommunicationStatisticsTimestamp != null)
                    hashCode = hashCode * 59 + this.CommunicationStatisticsTimestamp.GetHashCode();
                if (this.CampaignStatisticsTimestamp != null)
                    hashCode = hashCode * 59 + this.CampaignStatisticsTimestamp.GetHashCode();
                if (this.PeopleStatisticsTimestamp != null)
                    hashCode = hashCode * 59 + this.PeopleStatisticsTimestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
