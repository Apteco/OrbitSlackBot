/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Apteco.OrbitSlackBot.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitSlackBot.ApiClient.Model
{
    /// <summary>
    /// Display details for a user that was invalid for being added or removed  from sharing a particular collection
    /// </summary>
    [DataContract]
    public partial class InvalidToShareUserDisplayDetails :  IEquatable<InvalidToShareUserDisplayDetails>, IValidatableObject
    {
        /// <summary>
        /// The reason why the user was not valid for updating the share for a collection
        /// </summary>
        /// <value>The reason why the user was not valid for updating the share for a collection</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            
            /// <summary>
            /// Enum CollectionAlreadySharedToUser for value: CollectionAlreadySharedToUser
            /// </summary>
            [EnumMember(Value = "CollectionAlreadySharedToUser")]
            CollectionAlreadySharedToUser = 1,
            
            /// <summary>
            /// Enum CollectionNotSharedToUser for value: CollectionNotSharedToUser
            /// </summary>
            [EnumMember(Value = "CollectionNotSharedToUser")]
            CollectionNotSharedToUser = 2,
            
            /// <summary>
            /// Enum CollectionOwnedByUser for value: CollectionOwnedByUser
            /// </summary>
            [EnumMember(Value = "CollectionOwnedByUser")]
            CollectionOwnedByUser = 3,
            
            /// <summary>
            /// Enum InvalidEmailDomain for value: InvalidEmailDomain
            /// </summary>
            [EnumMember(Value = "InvalidEmailDomain")]
            InvalidEmailDomain = 4
        }

        /// <summary>
        /// The reason why the user was not valid for updating the share for a collection
        /// </summary>
        /// <value>The reason why the user was not valid for updating the share for a collection</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public ReasonEnum Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidToShareUserDisplayDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvalidToShareUserDisplayDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidToShareUserDisplayDetails" /> class.
        /// </summary>
        /// <param name="Reason">The reason why the user was not valid for updating the share for a collection (required).</param>
        /// <param name="Username">The user&#39;s username (required).</param>
        /// <param name="Firstname">The user&#39;s first name (required).</param>
        /// <param name="Surname">The user&#39;s surname (required).</param>
        /// <param name="EmailAddress">The user&#39;s email address (required).</param>
        public InvalidToShareUserDisplayDetails(ReasonEnum Reason = default(ReasonEnum), string Username = default(string), string Firstname = default(string), string Surname = default(string), string EmailAddress = default(string))
        {
            // to ensure "Reason" is required (not null)
            if (Reason == null)
            {
                throw new InvalidDataException("Reason is a required property for InvalidToShareUserDisplayDetails and cannot be null");
            }
            else
            {
                this.Reason = Reason;
            }
            // to ensure "Username" is required (not null)
            if (Username == null)
            {
                throw new InvalidDataException("Username is a required property for InvalidToShareUserDisplayDetails and cannot be null");
            }
            else
            {
                this.Username = Username;
            }
            // to ensure "Firstname" is required (not null)
            if (Firstname == null)
            {
                throw new InvalidDataException("Firstname is a required property for InvalidToShareUserDisplayDetails and cannot be null");
            }
            else
            {
                this.Firstname = Firstname;
            }
            // to ensure "Surname" is required (not null)
            if (Surname == null)
            {
                throw new InvalidDataException("Surname is a required property for InvalidToShareUserDisplayDetails and cannot be null");
            }
            else
            {
                this.Surname = Surname;
            }
            // to ensure "EmailAddress" is required (not null)
            if (EmailAddress == null)
            {
                throw new InvalidDataException("EmailAddress is a required property for InvalidToShareUserDisplayDetails and cannot be null");
            }
            else
            {
                this.EmailAddress = EmailAddress;
            }
        }
        

        /// <summary>
        /// The user&#39;s username
        /// </summary>
        /// <value>The user&#39;s username</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// The user&#39;s first name
        /// </summary>
        /// <value>The user&#39;s first name</value>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// The user&#39;s surname
        /// </summary>
        /// <value>The user&#39;s surname</value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// The user&#39;s email address
        /// </summary>
        /// <value>The user&#39;s email address</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvalidToShareUserDisplayDetails {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvalidToShareUserDisplayDetails);
        }

        /// <summary>
        /// Returns true if InvalidToShareUserDisplayDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of InvalidToShareUserDisplayDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvalidToShareUserDisplayDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
