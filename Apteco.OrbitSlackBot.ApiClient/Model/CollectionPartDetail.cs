/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Apteco.OrbitSlackBot.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitSlackBot.ApiClient.Model
{
    /// <summary>
    /// Details for a collection part
    /// </summary>
    [DataContract]
    public partial class CollectionPartDetail :  IEquatable<CollectionPartDetail>, IValidatableObject
    {
        /// <summary>
        /// The collection part&#39;s visualisation type
        /// </summary>
        /// <value>The collection part&#39;s visualisation type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisualisationTypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Cube for value: Cube
            /// </summary>
            [EnumMember(Value = "Cube")]
            Cube = 2,
            
            /// <summary>
            /// Enum Venn for value: Venn
            /// </summary>
            [EnumMember(Value = "Venn")]
            Venn = 3,
            
            /// <summary>
            /// Enum Chart for value: Chart
            /// </summary>
            [EnumMember(Value = "Chart")]
            Chart = 4,
            
            /// <summary>
            /// Enum DataGrid for value: DataGrid
            /// </summary>
            [EnumMember(Value = "DataGrid")]
            DataGrid = 5
        }

        /// <summary>
        /// The collection part&#39;s visualisation type
        /// </summary>
        /// <value>The collection part&#39;s visualisation type</value>
        [DataMember(Name="visualisationType", EmitDefaultValue=false)]
        public VisualisationTypeEnum VisualisationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionPartDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CollectionPartDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionPartDetail" /> class.
        /// </summary>
        /// <param name="Notes">The collection part&#39;s notes (required).</param>
        /// <param name="Title">The collection part&#39;s title (required).</param>
        /// <param name="Index">The part&#39;s index within the collection (required).</param>
        /// <param name="VisualisationType">The collection part&#39;s visualisation type (required).</param>
        /// <param name="VisualisationId">The id of the visualisation for this part (required).</param>
        public CollectionPartDetail(string Notes = default(string), string Title = default(string), int? Index = default(int?), VisualisationTypeEnum VisualisationType = default(VisualisationTypeEnum), string VisualisationId = default(string))
        {
            // to ensure "Notes" is required (not null)
            if (Notes == null)
            {
                throw new InvalidDataException("Notes is a required property for CollectionPartDetail and cannot be null");
            }
            else
            {
                this.Notes = Notes;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for CollectionPartDetail and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "Index" is required (not null)
            if (Index == null)
            {
                throw new InvalidDataException("Index is a required property for CollectionPartDetail and cannot be null");
            }
            else
            {
                this.Index = Index;
            }
            // to ensure "VisualisationType" is required (not null)
            if (VisualisationType == null)
            {
                throw new InvalidDataException("VisualisationType is a required property for CollectionPartDetail and cannot be null");
            }
            else
            {
                this.VisualisationType = VisualisationType;
            }
            // to ensure "VisualisationId" is required (not null)
            if (VisualisationId == null)
            {
                throw new InvalidDataException("VisualisationId is a required property for CollectionPartDetail and cannot be null");
            }
            else
            {
                this.VisualisationId = VisualisationId;
            }
        }
        
        /// <summary>
        /// The collection part&#39;s notes
        /// </summary>
        /// <value>The collection part&#39;s notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// The collection part&#39;s title
        /// </summary>
        /// <value>The collection part&#39;s title</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The part&#39;s index within the collection
        /// </summary>
        /// <value>The part&#39;s index within the collection</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }


        /// <summary>
        /// The id of the visualisation for this part
        /// </summary>
        /// <value>The id of the visualisation for this part</value>
        [DataMember(Name="visualisationId", EmitDefaultValue=false)]
        public string VisualisationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollectionPartDetail {\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  VisualisationType: ").Append(VisualisationType).Append("\n");
            sb.Append("  VisualisationId: ").Append(VisualisationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollectionPartDetail);
        }

        /// <summary>
        /// Returns true if CollectionPartDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of CollectionPartDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollectionPartDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.VisualisationType == input.VisualisationType ||
                    (this.VisualisationType != null &&
                    this.VisualisationType.Equals(input.VisualisationType))
                ) && 
                (
                    this.VisualisationId == input.VisualisationId ||
                    (this.VisualisationId != null &&
                    this.VisualisationId.Equals(input.VisualisationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.VisualisationType != null)
                    hashCode = hashCode * 59 + this.VisualisationType.GetHashCode();
                if (this.VisualisationId != null)
                    hashCode = hashCode * 59 + this.VisualisationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
