/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Apteco.OrbitSlackBot.ApiClient.Client;
using Apteco.OrbitSlackBot.ApiClient.Model;

namespace Apteco.OrbitSlackBot.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionSharesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new collection share from the given details, sharing from the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareDetail">The details of the collection to share and who to share it with (optional)</param>
        /// <returns>CollectionShareDetail</returns>
        CollectionShareDetail CollectionSharesCreateCollectionShare (string dataViewName, CreateCollectionShareDetail collectionShareDetail = null);

        /// <summary>
        /// Creates a new collection share from the given details, sharing from the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareDetail">The details of the collection to share and who to share it with (optional)</param>
        /// <returns>ApiResponse of CollectionShareDetail</returns>
        ApiResponse<CollectionShareDetail> CollectionSharesCreateCollectionShareWithHttpInfo (string dataViewName, CreateCollectionShareDetail collectionShareDetail = null);
        /// <summary>
        /// Creates a new collection share update from the given details, sharing from the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to update</param>
        /// <param name="collectionShareUpdate">The details of the collection share update, including who to add and remove from the share and notification settings (optional)</param>
        /// <returns>CreatedCollectionShareUpdateDetail</returns>
        CreatedCollectionShareUpdateDetail CollectionSharesCreateCollectionShareUpdate (string dataViewName, int? collectionShareId, CreateCollectionShareUpdate collectionShareUpdate = null);

        /// <summary>
        /// Creates a new collection share update from the given details, sharing from the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to update</param>
        /// <param name="collectionShareUpdate">The details of the collection share update, including who to add and remove from the share and notification settings (optional)</param>
        /// <returns>ApiResponse of CreatedCollectionShareUpdateDetail</returns>
        ApiResponse<CreatedCollectionShareUpdateDetail> CollectionSharesCreateCollectionShareUpdateWithHttpInfo (string dataViewName, int? collectionShareId, CreateCollectionShareUpdate collectionShareUpdate = null);
        /// <summary>
        /// Deletes the specified collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to delete</param>
        /// <returns></returns>
        void CollectionSharesDeleteCollectionShare (string dataViewName, int? collectionShareId);

        /// <summary>
        /// Deletes the specified collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CollectionSharesDeleteCollectionShareWithHttpInfo (string dataViewName, int? collectionShareId);
        /// <summary>
        /// Returns the details of a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <returns>CollectionShareDetail</returns>
        CollectionShareDetail CollectionSharesGetCollectionShare (string dataViewName, int? collectionShareId);

        /// <summary>
        /// Returns the details of a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <returns>ApiResponse of CollectionShareDetail</returns>
        ApiResponse<CollectionShareDetail> CollectionSharesGetCollectionShareWithHttpInfo (string dataViewName, int? collectionShareId);
        /// <summary>
        /// Returns a specific update that is associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <returns>CollectionShareUpdate</returns>
        CollectionShareUpdate CollectionSharesGetCollectionShareUpdate (string dataViewName, int? collectionShareId, int? collectionShareUpdateId);

        /// <summary>
        /// Returns a specific update that is associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <returns>ApiResponse of CollectionShareUpdate</returns>
        ApiResponse<CollectionShareUpdate> CollectionSharesGetCollectionShareUpdateWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId);
        /// <summary>
        /// Returns the list of the users added to a collection share as part of a specific update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserDisplayDetails</returns>
        PagedResultsUserDisplayDetails CollectionSharesGetCollectionShareUpdateAddedUsers (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of the users added to a collection share as part of a specific update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserDisplayDetails</returns>
        ApiResponse<PagedResultsUserDisplayDetails> CollectionSharesGetCollectionShareUpdateAddedUsersWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of the users removed from a collection share as part of a specific update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserDisplayDetails</returns>
        PagedResultsUserDisplayDetails CollectionSharesGetCollectionShareUpdateRemovedUsers (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of the users removed from a collection share as part of a specific update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserDisplayDetails</returns>
        ApiResponse<PagedResultsUserDisplayDetails> CollectionSharesGetCollectionShareUpdateRemovedUsersWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the updates that are associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionShareUpdate</returns>
        PagedResultsCollectionShareUpdate CollectionSharesGetCollectionShareUpdates (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the updates that are associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionShareUpdate</returns>
        ApiResponse<PagedResultsCollectionShareUpdate> CollectionSharesGetCollectionShareUpdatesWithHttpInfo (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of users that are associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserDisplayDetails</returns>
        PagedResultsUserDisplayDetails CollectionSharesGetCollectionShareUsers (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of users that are associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserDisplayDetails</returns>
        ApiResponse<PagedResultsUserDisplayDetails> CollectionSharesGetCollectionShareUsersWithHttpInfo (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets summary information about each collection share in the DataView.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionShareSummary</returns>
        PagedResultsCollectionShareSummary CollectionSharesGetCollectionShares (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets summary information about each collection share in the DataView.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionShareSummary</returns>
        ApiResponse<PagedResultsCollectionShareSummary> CollectionSharesGetCollectionSharesWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new collection share from the given details, sharing from the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareDetail">The details of the collection to share and who to share it with (optional)</param>
        /// <returns>Task of CollectionShareDetail</returns>
        System.Threading.Tasks.Task<CollectionShareDetail> CollectionSharesCreateCollectionShareAsync (string dataViewName, CreateCollectionShareDetail collectionShareDetail = null);

        /// <summary>
        /// Creates a new collection share from the given details, sharing from the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareDetail">The details of the collection to share and who to share it with (optional)</param>
        /// <returns>Task of ApiResponse (CollectionShareDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionShareDetail>> CollectionSharesCreateCollectionShareAsyncWithHttpInfo (string dataViewName, CreateCollectionShareDetail collectionShareDetail = null);
        /// <summary>
        /// Creates a new collection share update from the given details, sharing from the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to update</param>
        /// <param name="collectionShareUpdate">The details of the collection share update, including who to add and remove from the share and notification settings (optional)</param>
        /// <returns>Task of CreatedCollectionShareUpdateDetail</returns>
        System.Threading.Tasks.Task<CreatedCollectionShareUpdateDetail> CollectionSharesCreateCollectionShareUpdateAsync (string dataViewName, int? collectionShareId, CreateCollectionShareUpdate collectionShareUpdate = null);

        /// <summary>
        /// Creates a new collection share update from the given details, sharing from the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to update</param>
        /// <param name="collectionShareUpdate">The details of the collection share update, including who to add and remove from the share and notification settings (optional)</param>
        /// <returns>Task of ApiResponse (CreatedCollectionShareUpdateDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedCollectionShareUpdateDetail>> CollectionSharesCreateCollectionShareUpdateAsyncWithHttpInfo (string dataViewName, int? collectionShareId, CreateCollectionShareUpdate collectionShareUpdate = null);
        /// <summary>
        /// Deletes the specified collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CollectionSharesDeleteCollectionShareAsync (string dataViewName, int? collectionShareId);

        /// <summary>
        /// Deletes the specified collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CollectionSharesDeleteCollectionShareAsyncWithHttpInfo (string dataViewName, int? collectionShareId);
        /// <summary>
        /// Returns the details of a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <returns>Task of CollectionShareDetail</returns>
        System.Threading.Tasks.Task<CollectionShareDetail> CollectionSharesGetCollectionShareAsync (string dataViewName, int? collectionShareId);

        /// <summary>
        /// Returns the details of a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <returns>Task of ApiResponse (CollectionShareDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionShareDetail>> CollectionSharesGetCollectionShareAsyncWithHttpInfo (string dataViewName, int? collectionShareId);
        /// <summary>
        /// Returns a specific update that is associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <returns>Task of CollectionShareUpdate</returns>
        System.Threading.Tasks.Task<CollectionShareUpdate> CollectionSharesGetCollectionShareUpdateAsync (string dataViewName, int? collectionShareId, int? collectionShareUpdateId);

        /// <summary>
        /// Returns a specific update that is associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <returns>Task of ApiResponse (CollectionShareUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionShareUpdate>> CollectionSharesGetCollectionShareUpdateAsyncWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId);
        /// <summary>
        /// Returns the list of the users added to a collection share as part of a specific update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserDisplayDetails</returns>
        System.Threading.Tasks.Task<PagedResultsUserDisplayDetails> CollectionSharesGetCollectionShareUpdateAddedUsersAsync (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of the users added to a collection share as part of a specific update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserDisplayDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserDisplayDetails>> CollectionSharesGetCollectionShareUpdateAddedUsersAsyncWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of the users removed from a collection share as part of a specific update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserDisplayDetails</returns>
        System.Threading.Tasks.Task<PagedResultsUserDisplayDetails> CollectionSharesGetCollectionShareUpdateRemovedUsersAsync (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of the users removed from a collection share as part of a specific update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserDisplayDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserDisplayDetails>> CollectionSharesGetCollectionShareUpdateRemovedUsersAsyncWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the updates that are associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionShareUpdate</returns>
        System.Threading.Tasks.Task<PagedResultsCollectionShareUpdate> CollectionSharesGetCollectionShareUpdatesAsync (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the updates that are associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionShareUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionShareUpdate>> CollectionSharesGetCollectionShareUpdatesAsyncWithHttpInfo (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of users that are associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserDisplayDetails</returns>
        System.Threading.Tasks.Task<PagedResultsUserDisplayDetails> CollectionSharesGetCollectionShareUsersAsync (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of users that are associated with a particular collection share
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserDisplayDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserDisplayDetails>> CollectionSharesGetCollectionShareUsersAsyncWithHttpInfo (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets summary information about each collection share in the DataView.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionShareSummary</returns>
        System.Threading.Tasks.Task<PagedResultsCollectionShareSummary> CollectionSharesGetCollectionSharesAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets summary information about each collection share in the DataView.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionShareSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionShareSummary>> CollectionSharesGetCollectionSharesAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectionSharesApi : ICollectionSharesApi
    {
        private Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionSharesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionSharesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionSharesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollectionSharesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new collection share from the given details, sharing from the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareDetail">The details of the collection to share and who to share it with (optional)</param>
        /// <returns>CollectionShareDetail</returns>
        public CollectionShareDetail CollectionSharesCreateCollectionShare (string dataViewName, CreateCollectionShareDetail collectionShareDetail = null)
        {
             ApiResponse<CollectionShareDetail> localVarResponse = CollectionSharesCreateCollectionShareWithHttpInfo(dataViewName, collectionShareDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new collection share from the given details, sharing from the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareDetail">The details of the collection to share and who to share it with (optional)</param>
        /// <returns>ApiResponse of CollectionShareDetail</returns>
        public ApiResponse< CollectionShareDetail > CollectionSharesCreateCollectionShareWithHttpInfo (string dataViewName, CreateCollectionShareDetail collectionShareDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesCreateCollectionShare");

            var localVarPath = "/{dataViewName}/CollectionShares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareDetail != null && collectionShareDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(collectionShareDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collectionShareDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesCreateCollectionShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionShareDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionShareDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionShareDetail)));
        }

        /// <summary>
        /// Creates a new collection share from the given details, sharing from the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareDetail">The details of the collection to share and who to share it with (optional)</param>
        /// <returns>Task of CollectionShareDetail</returns>
        public async System.Threading.Tasks.Task<CollectionShareDetail> CollectionSharesCreateCollectionShareAsync (string dataViewName, CreateCollectionShareDetail collectionShareDetail = null)
        {
             ApiResponse<CollectionShareDetail> localVarResponse = await CollectionSharesCreateCollectionShareAsyncWithHttpInfo(dataViewName, collectionShareDetail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new collection share from the given details, sharing from the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareDetail">The details of the collection to share and who to share it with (optional)</param>
        /// <returns>Task of ApiResponse (CollectionShareDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionShareDetail>> CollectionSharesCreateCollectionShareAsyncWithHttpInfo (string dataViewName, CreateCollectionShareDetail collectionShareDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesCreateCollectionShare");

            var localVarPath = "/{dataViewName}/CollectionShares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareDetail != null && collectionShareDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(collectionShareDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collectionShareDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesCreateCollectionShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionShareDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionShareDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionShareDetail)));
        }

        /// <summary>
        /// Creates a new collection share update from the given details, sharing from the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to update</param>
        /// <param name="collectionShareUpdate">The details of the collection share update, including who to add and remove from the share and notification settings (optional)</param>
        /// <returns>CreatedCollectionShareUpdateDetail</returns>
        public CreatedCollectionShareUpdateDetail CollectionSharesCreateCollectionShareUpdate (string dataViewName, int? collectionShareId, CreateCollectionShareUpdate collectionShareUpdate = null)
        {
             ApiResponse<CreatedCollectionShareUpdateDetail> localVarResponse = CollectionSharesCreateCollectionShareUpdateWithHttpInfo(dataViewName, collectionShareId, collectionShareUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new collection share update from the given details, sharing from the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to update</param>
        /// <param name="collectionShareUpdate">The details of the collection share update, including who to add and remove from the share and notification settings (optional)</param>
        /// <returns>ApiResponse of CreatedCollectionShareUpdateDetail</returns>
        public ApiResponse< CreatedCollectionShareUpdateDetail > CollectionSharesCreateCollectionShareUpdateWithHttpInfo (string dataViewName, int? collectionShareId, CreateCollectionShareUpdate collectionShareUpdate = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesCreateCollectionShareUpdate");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesCreateCollectionShareUpdate");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (collectionShareUpdate != null && collectionShareUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(collectionShareUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collectionShareUpdate; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesCreateCollectionShareUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedCollectionShareUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatedCollectionShareUpdateDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedCollectionShareUpdateDetail)));
        }

        /// <summary>
        /// Creates a new collection share update from the given details, sharing from the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to update</param>
        /// <param name="collectionShareUpdate">The details of the collection share update, including who to add and remove from the share and notification settings (optional)</param>
        /// <returns>Task of CreatedCollectionShareUpdateDetail</returns>
        public async System.Threading.Tasks.Task<CreatedCollectionShareUpdateDetail> CollectionSharesCreateCollectionShareUpdateAsync (string dataViewName, int? collectionShareId, CreateCollectionShareUpdate collectionShareUpdate = null)
        {
             ApiResponse<CreatedCollectionShareUpdateDetail> localVarResponse = await CollectionSharesCreateCollectionShareUpdateAsyncWithHttpInfo(dataViewName, collectionShareId, collectionShareUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new collection share update from the given details, sharing from the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to update</param>
        /// <param name="collectionShareUpdate">The details of the collection share update, including who to add and remove from the share and notification settings (optional)</param>
        /// <returns>Task of ApiResponse (CreatedCollectionShareUpdateDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedCollectionShareUpdateDetail>> CollectionSharesCreateCollectionShareUpdateAsyncWithHttpInfo (string dataViewName, int? collectionShareId, CreateCollectionShareUpdate collectionShareUpdate = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesCreateCollectionShareUpdate");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesCreateCollectionShareUpdate");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (collectionShareUpdate != null && collectionShareUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(collectionShareUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collectionShareUpdate; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesCreateCollectionShareUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedCollectionShareUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatedCollectionShareUpdateDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedCollectionShareUpdateDetail)));
        }

        /// <summary>
        /// Deletes the specified collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to delete</param>
        /// <returns></returns>
        public void CollectionSharesDeleteCollectionShare (string dataViewName, int? collectionShareId)
        {
             CollectionSharesDeleteCollectionShareWithHttpInfo(dataViewName, collectionShareId);
        }

        /// <summary>
        /// Deletes the specified collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CollectionSharesDeleteCollectionShareWithHttpInfo (string dataViewName, int? collectionShareId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesDeleteCollectionShare");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesDeleteCollectionShare");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesDeleteCollectionShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CollectionSharesDeleteCollectionShareAsync (string dataViewName, int? collectionShareId)
        {
             await CollectionSharesDeleteCollectionShareAsyncWithHttpInfo(dataViewName, collectionShareId);

        }

        /// <summary>
        /// Deletes the specified collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CollectionSharesDeleteCollectionShareAsyncWithHttpInfo (string dataViewName, int? collectionShareId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesDeleteCollectionShare");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesDeleteCollectionShare");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesDeleteCollectionShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the details of a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <returns>CollectionShareDetail</returns>
        public CollectionShareDetail CollectionSharesGetCollectionShare (string dataViewName, int? collectionShareId)
        {
             ApiResponse<CollectionShareDetail> localVarResponse = CollectionSharesGetCollectionShareWithHttpInfo(dataViewName, collectionShareId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <returns>ApiResponse of CollectionShareDetail</returns>
        public ApiResponse< CollectionShareDetail > CollectionSharesGetCollectionShareWithHttpInfo (string dataViewName, int? collectionShareId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShare");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShare");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionShareDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionShareDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionShareDetail)));
        }

        /// <summary>
        /// Returns the details of a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <returns>Task of CollectionShareDetail</returns>
        public async System.Threading.Tasks.Task<CollectionShareDetail> CollectionSharesGetCollectionShareAsync (string dataViewName, int? collectionShareId)
        {
             ApiResponse<CollectionShareDetail> localVarResponse = await CollectionSharesGetCollectionShareAsyncWithHttpInfo(dataViewName, collectionShareId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <returns>Task of ApiResponse (CollectionShareDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionShareDetail>> CollectionSharesGetCollectionShareAsyncWithHttpInfo (string dataViewName, int? collectionShareId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShare");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShare");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionShareDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionShareDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionShareDetail)));
        }

        /// <summary>
        /// Returns a specific update that is associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <returns>CollectionShareUpdate</returns>
        public CollectionShareUpdate CollectionSharesGetCollectionShareUpdate (string dataViewName, int? collectionShareId, int? collectionShareUpdateId)
        {
             ApiResponse<CollectionShareUpdate> localVarResponse = CollectionSharesGetCollectionShareUpdateWithHttpInfo(dataViewName, collectionShareId, collectionShareUpdateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific update that is associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <returns>ApiResponse of CollectionShareUpdate</returns>
        public ApiResponse< CollectionShareUpdate > CollectionSharesGetCollectionShareUpdateWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdate");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdate");
            // verify the required parameter 'collectionShareUpdateId' is set
            if (collectionShareUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareUpdateId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdate");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Updates/{collectionShareUpdateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (collectionShareUpdateId != null) localVarPathParams.Add("collectionShareUpdateId", Configuration.ApiClient.ParameterToString(collectionShareUpdateId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShareUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionShareUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionShareUpdate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionShareUpdate)));
        }

        /// <summary>
        /// Returns a specific update that is associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <returns>Task of CollectionShareUpdate</returns>
        public async System.Threading.Tasks.Task<CollectionShareUpdate> CollectionSharesGetCollectionShareUpdateAsync (string dataViewName, int? collectionShareId, int? collectionShareUpdateId)
        {
             ApiResponse<CollectionShareUpdate> localVarResponse = await CollectionSharesGetCollectionShareUpdateAsyncWithHttpInfo(dataViewName, collectionShareId, collectionShareUpdateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a specific update that is associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <returns>Task of ApiResponse (CollectionShareUpdate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionShareUpdate>> CollectionSharesGetCollectionShareUpdateAsyncWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdate");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdate");
            // verify the required parameter 'collectionShareUpdateId' is set
            if (collectionShareUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareUpdateId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdate");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Updates/{collectionShareUpdateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (collectionShareUpdateId != null) localVarPathParams.Add("collectionShareUpdateId", Configuration.ApiClient.ParameterToString(collectionShareUpdateId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShareUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionShareUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionShareUpdate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionShareUpdate)));
        }

        /// <summary>
        /// Returns the list of the users added to a collection share as part of a specific update 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserDisplayDetails</returns>
        public PagedResultsUserDisplayDetails CollectionSharesGetCollectionShareUpdateAddedUsers (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserDisplayDetails> localVarResponse = CollectionSharesGetCollectionShareUpdateAddedUsersWithHttpInfo(dataViewName, collectionShareId, collectionShareUpdateId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of the users added to a collection share as part of a specific update 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserDisplayDetails</returns>
        public ApiResponse< PagedResultsUserDisplayDetails > CollectionSharesGetCollectionShareUpdateAddedUsersWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateAddedUsers");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateAddedUsers");
            // verify the required parameter 'collectionShareUpdateId' is set
            if (collectionShareUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareUpdateId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateAddedUsers");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Updates/{collectionShareUpdateId}/AddedUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (collectionShareUpdateId != null) localVarPathParams.Add("collectionShareUpdateId", Configuration.ApiClient.ParameterToString(collectionShareUpdateId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShareUpdateAddedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserDisplayDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserDisplayDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserDisplayDetails)));
        }

        /// <summary>
        /// Returns the list of the users added to a collection share as part of a specific update 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserDisplayDetails</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserDisplayDetails> CollectionSharesGetCollectionShareUpdateAddedUsersAsync (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserDisplayDetails> localVarResponse = await CollectionSharesGetCollectionShareUpdateAddedUsersAsyncWithHttpInfo(dataViewName, collectionShareId, collectionShareUpdateId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of the users added to a collection share as part of a specific update 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserDisplayDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserDisplayDetails>> CollectionSharesGetCollectionShareUpdateAddedUsersAsyncWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateAddedUsers");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateAddedUsers");
            // verify the required parameter 'collectionShareUpdateId' is set
            if (collectionShareUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareUpdateId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateAddedUsers");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Updates/{collectionShareUpdateId}/AddedUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (collectionShareUpdateId != null) localVarPathParams.Add("collectionShareUpdateId", Configuration.ApiClient.ParameterToString(collectionShareUpdateId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShareUpdateAddedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserDisplayDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserDisplayDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserDisplayDetails)));
        }

        /// <summary>
        /// Returns the list of the users removed from a collection share as part of a specific update 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserDisplayDetails</returns>
        public PagedResultsUserDisplayDetails CollectionSharesGetCollectionShareUpdateRemovedUsers (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserDisplayDetails> localVarResponse = CollectionSharesGetCollectionShareUpdateRemovedUsersWithHttpInfo(dataViewName, collectionShareId, collectionShareUpdateId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of the users removed from a collection share as part of a specific update 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserDisplayDetails</returns>
        public ApiResponse< PagedResultsUserDisplayDetails > CollectionSharesGetCollectionShareUpdateRemovedUsersWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateRemovedUsers");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateRemovedUsers");
            // verify the required parameter 'collectionShareUpdateId' is set
            if (collectionShareUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareUpdateId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateRemovedUsers");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Updates/{collectionShareUpdateId}/RemovedUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (collectionShareUpdateId != null) localVarPathParams.Add("collectionShareUpdateId", Configuration.ApiClient.ParameterToString(collectionShareUpdateId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShareUpdateRemovedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserDisplayDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserDisplayDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserDisplayDetails)));
        }

        /// <summary>
        /// Returns the list of the users removed from a collection share as part of a specific update 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserDisplayDetails</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserDisplayDetails> CollectionSharesGetCollectionShareUpdateRemovedUsersAsync (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserDisplayDetails> localVarResponse = await CollectionSharesGetCollectionShareUpdateRemovedUsersAsyncWithHttpInfo(dataViewName, collectionShareId, collectionShareUpdateId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of the users removed from a collection share as part of a specific update 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share the update is associated with</param>
        /// <param name="collectionShareUpdateId">The id of the collection share update to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserDisplayDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserDisplayDetails>> CollectionSharesGetCollectionShareUpdateRemovedUsersAsyncWithHttpInfo (string dataViewName, int? collectionShareId, int? collectionShareUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateRemovedUsers");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateRemovedUsers");
            // verify the required parameter 'collectionShareUpdateId' is set
            if (collectionShareUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareUpdateId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdateRemovedUsers");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Updates/{collectionShareUpdateId}/RemovedUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (collectionShareUpdateId != null) localVarPathParams.Add("collectionShareUpdateId", Configuration.ApiClient.ParameterToString(collectionShareUpdateId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShareUpdateRemovedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserDisplayDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserDisplayDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserDisplayDetails)));
        }

        /// <summary>
        /// Returns the updates that are associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionShareUpdate</returns>
        public PagedResultsCollectionShareUpdate CollectionSharesGetCollectionShareUpdates (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionShareUpdate> localVarResponse = CollectionSharesGetCollectionShareUpdatesWithHttpInfo(dataViewName, collectionShareId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the updates that are associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionShareUpdate</returns>
        public ApiResponse< PagedResultsCollectionShareUpdate > CollectionSharesGetCollectionShareUpdatesWithHttpInfo (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdates");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdates");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShareUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionShareUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsCollectionShareUpdate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionShareUpdate)));
        }

        /// <summary>
        /// Returns the updates that are associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionShareUpdate</returns>
        public async System.Threading.Tasks.Task<PagedResultsCollectionShareUpdate> CollectionSharesGetCollectionShareUpdatesAsync (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionShareUpdate> localVarResponse = await CollectionSharesGetCollectionShareUpdatesAsyncWithHttpInfo(dataViewName, collectionShareId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the updates that are associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Notes (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionShareUpdate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionShareUpdate>> CollectionSharesGetCollectionShareUpdatesAsyncWithHttpInfo (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdates");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUpdates");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShareUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionShareUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsCollectionShareUpdate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionShareUpdate)));
        }

        /// <summary>
        /// Returns the list of users that are associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserDisplayDetails</returns>
        public PagedResultsUserDisplayDetails CollectionSharesGetCollectionShareUsers (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserDisplayDetails> localVarResponse = CollectionSharesGetCollectionShareUsersWithHttpInfo(dataViewName, collectionShareId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of users that are associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserDisplayDetails</returns>
        public ApiResponse< PagedResultsUserDisplayDetails > CollectionSharesGetCollectionShareUsersWithHttpInfo (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUsers");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUsers");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShareUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserDisplayDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserDisplayDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserDisplayDetails)));
        }

        /// <summary>
        /// Returns the list of users that are associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserDisplayDetails</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserDisplayDetails> CollectionSharesGetCollectionShareUsersAsync (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserDisplayDetails> localVarResponse = await CollectionSharesGetCollectionShareUsersAsyncWithHttpInfo(dataViewName, collectionShareId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of users that are associated with a particular collection share 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionShareId">The id of the collection share to view the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Firstname, Surname (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserDisplayDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserDisplayDetails>> CollectionSharesGetCollectionShareUsersAsyncWithHttpInfo (string dataViewName, int? collectionShareId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUsers");
            // verify the required parameter 'collectionShareId' is set
            if (collectionShareId == null)
                throw new ApiException(400, "Missing required parameter 'collectionShareId' when calling CollectionSharesApi->CollectionSharesGetCollectionShareUsers");

            var localVarPath = "/{dataViewName}/CollectionShares/{collectionShareId}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionShareId != null) localVarPathParams.Add("collectionShareId", Configuration.ApiClient.ParameterToString(collectionShareId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShareUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserDisplayDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserDisplayDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserDisplayDetails)));
        }

        /// <summary>
        /// Gets summary information about each collection share in the DataView.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionShareSummary</returns>
        public PagedResultsCollectionShareSummary CollectionSharesGetCollectionShares (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionShareSummary> localVarResponse = CollectionSharesGetCollectionSharesWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets summary information about each collection share in the DataView.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionShareSummary</returns>
        public ApiResponse< PagedResultsCollectionShareSummary > CollectionSharesGetCollectionSharesWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShares");

            var localVarPath = "/{dataViewName}/CollectionShares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShares", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionShareSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsCollectionShareSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionShareSummary)));
        }

        /// <summary>
        /// Gets summary information about each collection share in the DataView.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionShareSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsCollectionShareSummary> CollectionSharesGetCollectionSharesAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionShareSummary> localVarResponse = await CollectionSharesGetCollectionSharesAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets summary information about each collection share in the DataView.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CollectionId, CollectionTitle, NumberOfUsersSharedWith (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionShareSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionShareSummary>> CollectionSharesGetCollectionSharesAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionSharesApi->CollectionSharesGetCollectionShares");

            var localVarPath = "/{dataViewName}/CollectionShares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionSharesGetCollectionShares", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionShareSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsCollectionShareSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionShareSummary)));
        }

    }
}
