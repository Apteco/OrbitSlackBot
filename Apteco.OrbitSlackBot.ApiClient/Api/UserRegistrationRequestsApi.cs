/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Apteco.OrbitSlackBot.ApiClient.Client;
using Apteco.OrbitSlackBot.ApiClient.Model;

namespace Apteco.OrbitSlackBot.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserRegistrationRequestsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Confirms a given user registration request and creates the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>UserSummary</returns>
        UserSummary UserRegistrationRequestsConfirmRegistrationRequest (string dataViewName, string token);

        /// <summary>
        /// Confirms a given user registration request and creates the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>ApiResponse of UserSummary</returns>
        ApiResponse<UserSummary> UserRegistrationRequestsConfirmRegistrationRequestWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Creates a new user registration requests, which will check the sign-up details and then issue a confirmation notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="createUserRegistrationRequest">The details needed to create the registration request (optional)</param>
        /// <returns>UserRegistrationRequestDetail</returns>
        UserRegistrationRequestDetail UserRegistrationRequestsCreateRegistrationRequest (string dataViewName, CreateUserRegistrationRequest createUserRegistrationRequest = null);

        /// <summary>
        /// Creates a new user registration requests, which will check the sign-up details and then issue a confirmation notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="createUserRegistrationRequest">The details needed to create the registration request (optional)</param>
        /// <returns>ApiResponse of UserRegistrationRequestDetail</returns>
        ApiResponse<UserRegistrationRequestDetail> UserRegistrationRequestsCreateRegistrationRequestWithHttpInfo (string dataViewName, CreateUserRegistrationRequest createUserRegistrationRequest = null);
        /// <summary>
        /// Returns details for a given user registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>UserRegistrationRequestDetail</returns>
        UserRegistrationRequestDetail UserRegistrationRequestsGetRegistrationRequest (string dataViewName, string token);

        /// <summary>
        /// Returns details for a given user registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>ApiResponse of UserRegistrationRequestDetail</returns>
        ApiResponse<UserRegistrationRequestDetail> UserRegistrationRequestsGetRegistrationRequestWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Returns all the current user regisration requests in the system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserRegistrationRequestSummary</returns>
        PagedResultsUserRegistrationRequestSummary UserRegistrationRequestsGetRegistrationRequests (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the current user regisration requests in the system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserRegistrationRequestSummary</returns>
        ApiResponse<PagedResultsUserRegistrationRequestSummary> UserRegistrationRequestsGetRegistrationRequestsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Confirms a given user registration request and creates the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>Task of UserSummary</returns>
        System.Threading.Tasks.Task<UserSummary> UserRegistrationRequestsConfirmRegistrationRequestAsync (string dataViewName, string token);

        /// <summary>
        /// Confirms a given user registration request and creates the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSummary>> UserRegistrationRequestsConfirmRegistrationRequestAsyncWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Creates a new user registration requests, which will check the sign-up details and then issue a confirmation notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="createUserRegistrationRequest">The details needed to create the registration request (optional)</param>
        /// <returns>Task of UserRegistrationRequestDetail</returns>
        System.Threading.Tasks.Task<UserRegistrationRequestDetail> UserRegistrationRequestsCreateRegistrationRequestAsync (string dataViewName, CreateUserRegistrationRequest createUserRegistrationRequest = null);

        /// <summary>
        /// Creates a new user registration requests, which will check the sign-up details and then issue a confirmation notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="createUserRegistrationRequest">The details needed to create the registration request (optional)</param>
        /// <returns>Task of ApiResponse (UserRegistrationRequestDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserRegistrationRequestDetail>> UserRegistrationRequestsCreateRegistrationRequestAsyncWithHttpInfo (string dataViewName, CreateUserRegistrationRequest createUserRegistrationRequest = null);
        /// <summary>
        /// Returns details for a given user registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>Task of UserRegistrationRequestDetail</returns>
        System.Threading.Tasks.Task<UserRegistrationRequestDetail> UserRegistrationRequestsGetRegistrationRequestAsync (string dataViewName, string token);

        /// <summary>
        /// Returns details for a given user registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>Task of ApiResponse (UserRegistrationRequestDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserRegistrationRequestDetail>> UserRegistrationRequestsGetRegistrationRequestAsyncWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Returns all the current user regisration requests in the system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserRegistrationRequestSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserRegistrationRequestSummary> UserRegistrationRequestsGetRegistrationRequestsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the current user regisration requests in the system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserRegistrationRequestSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserRegistrationRequestSummary>> UserRegistrationRequestsGetRegistrationRequestsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserRegistrationRequestsApi : IUserRegistrationRequestsApi
    {
        private Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserRegistrationRequestsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationRequestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserRegistrationRequestsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Confirms a given user registration request and creates the user 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>UserSummary</returns>
        public UserSummary UserRegistrationRequestsConfirmRegistrationRequest (string dataViewName, string token)
        {
             ApiResponse<UserSummary> localVarResponse = UserRegistrationRequestsConfirmRegistrationRequestWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirms a given user registration request and creates the user 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>ApiResponse of UserSummary</returns>
        public ApiResponse< UserSummary > UserRegistrationRequestsConfirmRegistrationRequestWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserRegistrationRequestsApi->UserRegistrationRequestsConfirmRegistrationRequest");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserRegistrationRequestsApi->UserRegistrationRequestsConfirmRegistrationRequest");

            var localVarPath = "/{dataViewName}/UserRegistrationRequests/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserRegistrationRequestsConfirmRegistrationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Confirms a given user registration request and creates the user 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>Task of UserSummary</returns>
        public async System.Threading.Tasks.Task<UserSummary> UserRegistrationRequestsConfirmRegistrationRequestAsync (string dataViewName, string token)
        {
             ApiResponse<UserSummary> localVarResponse = await UserRegistrationRequestsConfirmRegistrationRequestAsyncWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirms a given user registration request and creates the user 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSummary>> UserRegistrationRequestsConfirmRegistrationRequestAsyncWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserRegistrationRequestsApi->UserRegistrationRequestsConfirmRegistrationRequest");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserRegistrationRequestsApi->UserRegistrationRequestsConfirmRegistrationRequest");

            var localVarPath = "/{dataViewName}/UserRegistrationRequests/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserRegistrationRequestsConfirmRegistrationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Creates a new user registration requests, which will check the sign-up details and then issue a confirmation notification 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="createUserRegistrationRequest">The details needed to create the registration request (optional)</param>
        /// <returns>UserRegistrationRequestDetail</returns>
        public UserRegistrationRequestDetail UserRegistrationRequestsCreateRegistrationRequest (string dataViewName, CreateUserRegistrationRequest createUserRegistrationRequest = null)
        {
             ApiResponse<UserRegistrationRequestDetail> localVarResponse = UserRegistrationRequestsCreateRegistrationRequestWithHttpInfo(dataViewName, createUserRegistrationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new user registration requests, which will check the sign-up details and then issue a confirmation notification 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="createUserRegistrationRequest">The details needed to create the registration request (optional)</param>
        /// <returns>ApiResponse of UserRegistrationRequestDetail</returns>
        public ApiResponse< UserRegistrationRequestDetail > UserRegistrationRequestsCreateRegistrationRequestWithHttpInfo (string dataViewName, CreateUserRegistrationRequest createUserRegistrationRequest = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserRegistrationRequestsApi->UserRegistrationRequestsCreateRegistrationRequest");

            var localVarPath = "/{dataViewName}/UserRegistrationRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (createUserRegistrationRequest != null && createUserRegistrationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createUserRegistrationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserRegistrationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserRegistrationRequestsCreateRegistrationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserRegistrationRequestDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserRegistrationRequestDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserRegistrationRequestDetail)));
        }

        /// <summary>
        /// Creates a new user registration requests, which will check the sign-up details and then issue a confirmation notification 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="createUserRegistrationRequest">The details needed to create the registration request (optional)</param>
        /// <returns>Task of UserRegistrationRequestDetail</returns>
        public async System.Threading.Tasks.Task<UserRegistrationRequestDetail> UserRegistrationRequestsCreateRegistrationRequestAsync (string dataViewName, CreateUserRegistrationRequest createUserRegistrationRequest = null)
        {
             ApiResponse<UserRegistrationRequestDetail> localVarResponse = await UserRegistrationRequestsCreateRegistrationRequestAsyncWithHttpInfo(dataViewName, createUserRegistrationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new user registration requests, which will check the sign-up details and then issue a confirmation notification 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="createUserRegistrationRequest">The details needed to create the registration request (optional)</param>
        /// <returns>Task of ApiResponse (UserRegistrationRequestDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserRegistrationRequestDetail>> UserRegistrationRequestsCreateRegistrationRequestAsyncWithHttpInfo (string dataViewName, CreateUserRegistrationRequest createUserRegistrationRequest = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserRegistrationRequestsApi->UserRegistrationRequestsCreateRegistrationRequest");

            var localVarPath = "/{dataViewName}/UserRegistrationRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (createUserRegistrationRequest != null && createUserRegistrationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createUserRegistrationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserRegistrationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserRegistrationRequestsCreateRegistrationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserRegistrationRequestDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserRegistrationRequestDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserRegistrationRequestDetail)));
        }

        /// <summary>
        /// Returns details for a given user registration request 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>UserRegistrationRequestDetail</returns>
        public UserRegistrationRequestDetail UserRegistrationRequestsGetRegistrationRequest (string dataViewName, string token)
        {
             ApiResponse<UserRegistrationRequestDetail> localVarResponse = UserRegistrationRequestsGetRegistrationRequestWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for a given user registration request 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>ApiResponse of UserRegistrationRequestDetail</returns>
        public ApiResponse< UserRegistrationRequestDetail > UserRegistrationRequestsGetRegistrationRequestWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserRegistrationRequestsApi->UserRegistrationRequestsGetRegistrationRequest");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserRegistrationRequestsApi->UserRegistrationRequestsGetRegistrationRequest");

            var localVarPath = "/{dataViewName}/UserRegistrationRequests/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserRegistrationRequestsGetRegistrationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserRegistrationRequestDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserRegistrationRequestDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserRegistrationRequestDetail)));
        }

        /// <summary>
        /// Returns details for a given user registration request 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>Task of UserRegistrationRequestDetail</returns>
        public async System.Threading.Tasks.Task<UserRegistrationRequestDetail> UserRegistrationRequestsGetRegistrationRequestAsync (string dataViewName, string token)
        {
             ApiResponse<UserRegistrationRequestDetail> localVarResponse = await UserRegistrationRequestsGetRegistrationRequestAsyncWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details for a given user registration request 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the request</param>
        /// <returns>Task of ApiResponse (UserRegistrationRequestDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserRegistrationRequestDetail>> UserRegistrationRequestsGetRegistrationRequestAsyncWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserRegistrationRequestsApi->UserRegistrationRequestsGetRegistrationRequest");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserRegistrationRequestsApi->UserRegistrationRequestsGetRegistrationRequest");

            var localVarPath = "/{dataViewName}/UserRegistrationRequests/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserRegistrationRequestsGetRegistrationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserRegistrationRequestDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserRegistrationRequestDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserRegistrationRequestDetail)));
        }

        /// <summary>
        /// Returns all the current user regisration requests in the system.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserRegistrationRequestSummary</returns>
        public PagedResultsUserRegistrationRequestSummary UserRegistrationRequestsGetRegistrationRequests (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserRegistrationRequestSummary> localVarResponse = UserRegistrationRequestsGetRegistrationRequestsWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the current user regisration requests in the system.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserRegistrationRequestSummary</returns>
        public ApiResponse< PagedResultsUserRegistrationRequestSummary > UserRegistrationRequestsGetRegistrationRequestsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserRegistrationRequestsApi->UserRegistrationRequestsGetRegistrationRequests");

            var localVarPath = "/{dataViewName}/UserRegistrationRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserRegistrationRequestsGetRegistrationRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserRegistrationRequestSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserRegistrationRequestSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserRegistrationRequestSummary)));
        }

        /// <summary>
        /// Returns all the current user regisration requests in the system.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserRegistrationRequestSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserRegistrationRequestSummary> UserRegistrationRequestsGetRegistrationRequestsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserRegistrationRequestSummary> localVarResponse = await UserRegistrationRequestsGetRegistrationRequestsAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all the current user regisration requests in the system.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserRegistrationRequestSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserRegistrationRequestSummary>> UserRegistrationRequestsGetRegistrationRequestsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserRegistrationRequestsApi->UserRegistrationRequestsGetRegistrationRequests");

            var localVarPath = "/{dataViewName}/UserRegistrationRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserRegistrationRequestsGetRegistrationRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserRegistrationRequestSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserRegistrationRequestSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserRegistrationRequestSummary)));
        }

    }
}
