/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Apteco.OrbitSlackBot.ApiClient.Client;
using Apteco.OrbitSlackBot.ApiClient.Model;

namespace Apteco.OrbitSlackBot.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Change the password for the user with the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="changePasswordDetails">The user&#39;s current and new password (optional)</param>
        /// <returns></returns>
        void UsersChangeUserPassword (string dataViewName, string username, ChangePasswordDetails changePasswordDetails = null);

        /// <summary>
        /// Change the password for the user with the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="changePasswordDetails">The user&#39;s current and new password (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersChangeUserPasswordWithHttpInfo (string dataViewName, string username, ChangePasswordDetails changePasswordDetails = null);
        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>UserCollectionDetail</returns>
        UserCollectionDetail UsersGetUserCollection (string dataViewName, string username, int? collectionId);

        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>ApiResponse of UserCollectionDetail</returns>
        ApiResponse<UserCollectionDetail> UsersGetUserCollectionWithHttpInfo (string dataViewName, string username, int? collectionId);
        /// <summary>
        /// Returns the list of collections associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserCollectionSummary</returns>
        PagedResultsUserCollectionSummary UsersGetUserCollections (string dataViewName, string username, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of collections associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserCollectionSummary</returns>
        ApiResponse<PagedResultsUserCollectionSummary> UsersGetUserCollectionsWithHttpInfo (string dataViewName, string username, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets the user configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>UserConfigurationDetails</returns>
        UserConfigurationDetails UsersGetUserConfiguration (string dataViewName);

        /// <summary>
        /// Gets the user configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of UserConfigurationDetails</returns>
        ApiResponse<UserConfigurationDetails> UsersGetUserConfigurationWithHttpInfo (string dataViewName);
        /// <summary>
        /// Returns details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>UserSummary</returns>
        UserSummary UsersGetUserDetails (string dataViewName, string username);

        /// <summary>
        /// Returns details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>ApiResponse of UserSummary</returns>
        ApiResponse<UserSummary> UsersGetUserDetailsWithHttpInfo (string dataViewName, string username);
        /// <summary>
        /// Returns all users in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserSummary</returns>
        PagedResultsUserSummary UsersGetUserDetailsList (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all users in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserSummary</returns>
        ApiResponse<PagedResultsUserSummary> UsersGetUserDetailsListWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Updates one or more collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="updates">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>PagedResultsModifyUserCollectionDetailResults</returns>
        PagedResultsModifyUserCollectionDetailResults UsersModifyUserCollections (string dataViewName, string username, ModifyItemsModifyUserCollection updates = null);

        /// <summary>
        /// Updates one or more collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="updates">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyUserCollectionDetailResults</returns>
        ApiResponse<PagedResultsModifyUserCollectionDetailResults> UsersModifyUserCollectionsWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserCollection updates = null);
        /// <summary>
        /// Update some properties of a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="patch">The JSON patch specification of how to update some of the properties of the collection (optional)</param>
        /// <returns>UserCollectionDetail</returns>
        UserCollectionDetail UsersPatchUserCollection (string dataViewName, string username, int? collectionId, JsonPatchDocumentUpsertUserCollectionDetail patch = null);

        /// <summary>
        /// Update some properties of a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="patch">The JSON patch specification of how to update some of the properties of the collection (optional)</param>
        /// <returns>ApiResponse of UserCollectionDetail</returns>
        ApiResponse<UserCollectionDetail> UsersPatchUserCollectionWithHttpInfo (string dataViewName, string username, int? collectionId, JsonPatchDocumentUpsertUserCollectionDetail patch = null);
        /// <summary>
        /// Updates a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="collectionDetail">The new details of the collection (optional)</param>
        /// <returns>UserCollectionDetail</returns>
        UserCollectionDetail UsersUpdateUserCollection (string dataViewName, string username, int? collectionId, UpsertUserCollectionDetail collectionDetail = null);

        /// <summary>
        /// Updates a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="collectionDetail">The new details of the collection (optional)</param>
        /// <returns>ApiResponse of UserCollectionDetail</returns>
        ApiResponse<UserCollectionDetail> UsersUpdateUserCollectionWithHttpInfo (string dataViewName, string username, int? collectionId, UpsertUserCollectionDetail collectionDetail = null);
        /// <summary>
        /// Updates user details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="updateUserDetails">The details to update the user with (optional)</param>
        /// <returns>UserSummary</returns>
        UserSummary UsersUpdateUserDetails (string dataViewName, string username, UpdateUserDetails updateUserDetails = null);

        /// <summary>
        /// Updates user details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="updateUserDetails">The details to update the user with (optional)</param>
        /// <returns>ApiResponse of UserSummary</returns>
        ApiResponse<UserSummary> UsersUpdateUserDetailsWithHttpInfo (string dataViewName, string username, UpdateUserDetails updateUserDetails = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Change the password for the user with the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="changePasswordDetails">The user&#39;s current and new password (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersChangeUserPasswordAsync (string dataViewName, string username, ChangePasswordDetails changePasswordDetails = null);

        /// <summary>
        /// Change the password for the user with the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="changePasswordDetails">The user&#39;s current and new password (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersChangeUserPasswordAsyncWithHttpInfo (string dataViewName, string username, ChangePasswordDetails changePasswordDetails = null);
        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of UserCollectionDetail</returns>
        System.Threading.Tasks.Task<UserCollectionDetail> UsersGetUserCollectionAsync (string dataViewName, string username, int? collectionId);

        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of ApiResponse (UserCollectionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCollectionDetail>> UsersGetUserCollectionAsyncWithHttpInfo (string dataViewName, string username, int? collectionId);
        /// <summary>
        /// Returns the list of collections associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserCollectionSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserCollectionSummary> UsersGetUserCollectionsAsync (string dataViewName, string username, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of collections associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserCollectionSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserCollectionSummary>> UsersGetUserCollectionsAsyncWithHttpInfo (string dataViewName, string username, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets the user configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of UserConfigurationDetails</returns>
        System.Threading.Tasks.Task<UserConfigurationDetails> UsersGetUserConfigurationAsync (string dataViewName);

        /// <summary>
        /// Gets the user configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (UserConfigurationDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserConfigurationDetails>> UsersGetUserConfigurationAsyncWithHttpInfo (string dataViewName);
        /// <summary>
        /// Returns details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>Task of UserSummary</returns>
        System.Threading.Tasks.Task<UserSummary> UsersGetUserDetailsAsync (string dataViewName, string username);

        /// <summary>
        /// Returns details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersGetUserDetailsAsyncWithHttpInfo (string dataViewName, string username);
        /// <summary>
        /// Returns all users in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserSummary> UsersGetUserDetailsListAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all users in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserSummary>> UsersGetUserDetailsListAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Updates one or more collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="updates">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>Task of PagedResultsModifyUserCollectionDetailResults</returns>
        System.Threading.Tasks.Task<PagedResultsModifyUserCollectionDetailResults> UsersModifyUserCollectionsAsync (string dataViewName, string username, ModifyItemsModifyUserCollection updates = null);

        /// <summary>
        /// Updates one or more collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="updates">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyUserCollectionDetailResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyUserCollectionDetailResults>> UsersModifyUserCollectionsAsyncWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserCollection updates = null);
        /// <summary>
        /// Update some properties of a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="patch">The JSON patch specification of how to update some of the properties of the collection (optional)</param>
        /// <returns>Task of UserCollectionDetail</returns>
        System.Threading.Tasks.Task<UserCollectionDetail> UsersPatchUserCollectionAsync (string dataViewName, string username, int? collectionId, JsonPatchDocumentUpsertUserCollectionDetail patch = null);

        /// <summary>
        /// Update some properties of a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="patch">The JSON patch specification of how to update some of the properties of the collection (optional)</param>
        /// <returns>Task of ApiResponse (UserCollectionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCollectionDetail>> UsersPatchUserCollectionAsyncWithHttpInfo (string dataViewName, string username, int? collectionId, JsonPatchDocumentUpsertUserCollectionDetail patch = null);
        /// <summary>
        /// Updates a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="collectionDetail">The new details of the collection (optional)</param>
        /// <returns>Task of UserCollectionDetail</returns>
        System.Threading.Tasks.Task<UserCollectionDetail> UsersUpdateUserCollectionAsync (string dataViewName, string username, int? collectionId, UpsertUserCollectionDetail collectionDetail = null);

        /// <summary>
        /// Updates a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="collectionDetail">The new details of the collection (optional)</param>
        /// <returns>Task of ApiResponse (UserCollectionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCollectionDetail>> UsersUpdateUserCollectionAsyncWithHttpInfo (string dataViewName, string username, int? collectionId, UpsertUserCollectionDetail collectionDetail = null);
        /// <summary>
        /// Updates user details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="updateUserDetails">The details to update the user with (optional)</param>
        /// <returns>Task of UserSummary</returns>
        System.Threading.Tasks.Task<UserSummary> UsersUpdateUserDetailsAsync (string dataViewName, string username, UpdateUserDetails updateUserDetails = null);

        /// <summary>
        /// Updates user details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="updateUserDetails">The details to update the user with (optional)</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersUpdateUserDetailsAsyncWithHttpInfo (string dataViewName, string username, UpdateUserDetails updateUserDetails = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Change the password for the user with the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="changePasswordDetails">The user&#39;s current and new password (optional)</param>
        /// <returns></returns>
        public void UsersChangeUserPassword (string dataViewName, string username, ChangePasswordDetails changePasswordDetails = null)
        {
             UsersChangeUserPasswordWithHttpInfo(dataViewName, username, changePasswordDetails);
        }

        /// <summary>
        /// Change the password for the user with the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="changePasswordDetails">The user&#39;s current and new password (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersChangeUserPasswordWithHttpInfo (string dataViewName, string username, ChangePasswordDetails changePasswordDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersChangeUserPassword");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersChangeUserPassword");

            var localVarPath = "/{dataViewName}/Users/{username}/ChangePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (changePasswordDetails != null && changePasswordDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(changePasswordDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changePasswordDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersChangeUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change the password for the user with the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="changePasswordDetails">The user&#39;s current and new password (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersChangeUserPasswordAsync (string dataViewName, string username, ChangePasswordDetails changePasswordDetails = null)
        {
             await UsersChangeUserPasswordAsyncWithHttpInfo(dataViewName, username, changePasswordDetails);

        }

        /// <summary>
        /// Change the password for the user with the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="changePasswordDetails">The user&#39;s current and new password (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersChangeUserPasswordAsyncWithHttpInfo (string dataViewName, string username, ChangePasswordDetails changePasswordDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersChangeUserPassword");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersChangeUserPassword");

            var localVarPath = "/{dataViewName}/Users/{username}/ChangePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (changePasswordDetails != null && changePasswordDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(changePasswordDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changePasswordDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersChangeUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>UserCollectionDetail</returns>
        public UserCollectionDetail UsersGetUserCollection (string dataViewName, string username, int? collectionId)
        {
             ApiResponse<UserCollectionDetail> localVarResponse = UsersGetUserCollectionWithHttpInfo(dataViewName, username, collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>ApiResponse of UserCollectionDetail</returns>
        public ApiResponse< UserCollectionDetail > UsersGetUserCollectionWithHttpInfo (string dataViewName, string username, int? collectionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserCollection");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling UsersApi->UsersGetUserCollection");

            var localVarPath = "/{dataViewName}/Users/{username}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", Configuration.ApiClient.ParameterToString(collectionId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCollectionDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCollectionDetail)));
        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of UserCollectionDetail</returns>
        public async System.Threading.Tasks.Task<UserCollectionDetail> UsersGetUserCollectionAsync (string dataViewName, string username, int? collectionId)
        {
             ApiResponse<UserCollectionDetail> localVarResponse = await UsersGetUserCollectionAsyncWithHttpInfo(dataViewName, username, collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of ApiResponse (UserCollectionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCollectionDetail>> UsersGetUserCollectionAsyncWithHttpInfo (string dataViewName, string username, int? collectionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserCollection");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling UsersApi->UsersGetUserCollection");

            var localVarPath = "/{dataViewName}/Users/{username}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", Configuration.ApiClient.ParameterToString(collectionId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCollectionDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCollectionDetail)));
        }

        /// <summary>
        /// Returns the list of collections associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserCollectionSummary</returns>
        public PagedResultsUserCollectionSummary UsersGetUserCollections (string dataViewName, string username, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserCollectionSummary> localVarResponse = UsersGetUserCollectionsWithHttpInfo(dataViewName, username, includeDeleted, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of collections associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserCollectionSummary</returns>
        public ApiResponse< PagedResultsUserCollectionSummary > UsersGetUserCollectionsWithHttpInfo (string dataViewName, string username, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserCollections");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserCollections");

            var localVarPath = "/{dataViewName}/Users/{username}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserCollectionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserCollectionSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserCollectionSummary)));
        }

        /// <summary>
        /// Returns the list of collections associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserCollectionSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserCollectionSummary> UsersGetUserCollectionsAsync (string dataViewName, string username, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserCollectionSummary> localVarResponse = await UsersGetUserCollectionsAsyncWithHttpInfo(dataViewName, username, includeDeleted, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of collections associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserCollectionSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserCollectionSummary>> UsersGetUserCollectionsAsyncWithHttpInfo (string dataViewName, string username, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserCollections");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserCollections");

            var localVarPath = "/{dataViewName}/Users/{username}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserCollectionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserCollectionSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserCollectionSummary)));
        }

        /// <summary>
        /// Gets the user configuration 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>UserConfigurationDetails</returns>
        public UserConfigurationDetails UsersGetUserConfiguration (string dataViewName)
        {
             ApiResponse<UserConfigurationDetails> localVarResponse = UsersGetUserConfigurationWithHttpInfo(dataViewName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the user configuration 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of UserConfigurationDetails</returns>
        public ApiResponse< UserConfigurationDetails > UsersGetUserConfigurationWithHttpInfo (string dataViewName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserConfiguration");

            var localVarPath = "/{dataViewName}/Users/Configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserConfigurationDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserConfigurationDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserConfigurationDetails)));
        }

        /// <summary>
        /// Gets the user configuration 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of UserConfigurationDetails</returns>
        public async System.Threading.Tasks.Task<UserConfigurationDetails> UsersGetUserConfigurationAsync (string dataViewName)
        {
             ApiResponse<UserConfigurationDetails> localVarResponse = await UsersGetUserConfigurationAsyncWithHttpInfo(dataViewName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the user configuration 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (UserConfigurationDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserConfigurationDetails>> UsersGetUserConfigurationAsyncWithHttpInfo (string dataViewName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserConfiguration");

            var localVarPath = "/{dataViewName}/Users/Configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserConfigurationDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserConfigurationDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserConfigurationDetails)));
        }

        /// <summary>
        /// Returns details for the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>UserSummary</returns>
        public UserSummary UsersGetUserDetails (string dataViewName, string username)
        {
             ApiResponse<UserSummary> localVarResponse = UsersGetUserDetailsWithHttpInfo(dataViewName, username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>ApiResponse of UserSummary</returns>
        public ApiResponse< UserSummary > UsersGetUserDetailsWithHttpInfo (string dataViewName, string username)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDetails");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserDetails");

            var localVarPath = "/{dataViewName}/Users/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Returns details for the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>Task of UserSummary</returns>
        public async System.Threading.Tasks.Task<UserSummary> UsersGetUserDetailsAsync (string dataViewName, string username)
        {
             ApiResponse<UserSummary> localVarResponse = await UsersGetUserDetailsAsyncWithHttpInfo(dataViewName, username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details for the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersGetUserDetailsAsyncWithHttpInfo (string dataViewName, string username)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDetails");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserDetails");

            var localVarPath = "/{dataViewName}/Users/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Returns all users in the system. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserSummary</returns>
        public PagedResultsUserSummary UsersGetUserDetailsList (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserSummary> localVarResponse = UsersGetUserDetailsListWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all users in the system. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserSummary</returns>
        public ApiResponse< PagedResultsUserSummary > UsersGetUserDetailsListWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDetailsList");

            var localVarPath = "/{dataViewName}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDetailsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserSummary)));
        }

        /// <summary>
        /// Returns all users in the system. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserSummary> UsersGetUserDetailsListAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserSummary> localVarResponse = await UsersGetUserDetailsListAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all users in the system. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserSummary>> UsersGetUserDetailsListAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDetailsList");

            var localVarPath = "/{dataViewName}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDetailsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsUserSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserSummary)));
        }

        /// <summary>
        /// Updates one or more collections 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="updates">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>PagedResultsModifyUserCollectionDetailResults</returns>
        public PagedResultsModifyUserCollectionDetailResults UsersModifyUserCollections (string dataViewName, string username, ModifyItemsModifyUserCollection updates = null)
        {
             ApiResponse<PagedResultsModifyUserCollectionDetailResults> localVarResponse = UsersModifyUserCollectionsWithHttpInfo(dataViewName, username, updates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates one or more collections 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="updates">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyUserCollectionDetailResults</returns>
        public ApiResponse< PagedResultsModifyUserCollectionDetailResults > UsersModifyUserCollectionsWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserCollection updates = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersModifyUserCollections");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersModifyUserCollections");

            var localVarPath = "/{dataViewName}/Users/{username}/Collections/Modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (updates != null && updates.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updates; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersModifyUserCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyUserCollectionDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsModifyUserCollectionDetailResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyUserCollectionDetailResults)));
        }

        /// <summary>
        /// Updates one or more collections 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="updates">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>Task of PagedResultsModifyUserCollectionDetailResults</returns>
        public async System.Threading.Tasks.Task<PagedResultsModifyUserCollectionDetailResults> UsersModifyUserCollectionsAsync (string dataViewName, string username, ModifyItemsModifyUserCollection updates = null)
        {
             ApiResponse<PagedResultsModifyUserCollectionDetailResults> localVarResponse = await UsersModifyUserCollectionsAsyncWithHttpInfo(dataViewName, username, updates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates one or more collections 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="updates">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyUserCollectionDetailResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyUserCollectionDetailResults>> UsersModifyUserCollectionsAsyncWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserCollection updates = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersModifyUserCollections");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersModifyUserCollections");

            var localVarPath = "/{dataViewName}/Users/{username}/Collections/Modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (updates != null && updates.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updates; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersModifyUserCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyUserCollectionDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsModifyUserCollectionDetailResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyUserCollectionDetailResults)));
        }

        /// <summary>
        /// Update some properties of a collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="patch">The JSON patch specification of how to update some of the properties of the collection (optional)</param>
        /// <returns>UserCollectionDetail</returns>
        public UserCollectionDetail UsersPatchUserCollection (string dataViewName, string username, int? collectionId, JsonPatchDocumentUpsertUserCollectionDetail patch = null)
        {
             ApiResponse<UserCollectionDetail> localVarResponse = UsersPatchUserCollectionWithHttpInfo(dataViewName, username, collectionId, patch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update some properties of a collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="patch">The JSON patch specification of how to update some of the properties of the collection (optional)</param>
        /// <returns>ApiResponse of UserCollectionDetail</returns>
        public ApiResponse< UserCollectionDetail > UsersPatchUserCollectionWithHttpInfo (string dataViewName, string username, int? collectionId, JsonPatchDocumentUpsertUserCollectionDetail patch = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersPatchUserCollection");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersPatchUserCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling UsersApi->UsersPatchUserCollection");

            var localVarPath = "/{dataViewName}/Users/{username}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (patch != null && patch.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(patch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patch; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPatchUserCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCollectionDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCollectionDetail)));
        }

        /// <summary>
        /// Update some properties of a collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="patch">The JSON patch specification of how to update some of the properties of the collection (optional)</param>
        /// <returns>Task of UserCollectionDetail</returns>
        public async System.Threading.Tasks.Task<UserCollectionDetail> UsersPatchUserCollectionAsync (string dataViewName, string username, int? collectionId, JsonPatchDocumentUpsertUserCollectionDetail patch = null)
        {
             ApiResponse<UserCollectionDetail> localVarResponse = await UsersPatchUserCollectionAsyncWithHttpInfo(dataViewName, username, collectionId, patch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update some properties of a collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="patch">The JSON patch specification of how to update some of the properties of the collection (optional)</param>
        /// <returns>Task of ApiResponse (UserCollectionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCollectionDetail>> UsersPatchUserCollectionAsyncWithHttpInfo (string dataViewName, string username, int? collectionId, JsonPatchDocumentUpsertUserCollectionDetail patch = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersPatchUserCollection");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersPatchUserCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling UsersApi->UsersPatchUserCollection");

            var localVarPath = "/{dataViewName}/Users/{username}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (patch != null && patch.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(patch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patch; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPatchUserCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCollectionDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCollectionDetail)));
        }

        /// <summary>
        /// Updates a collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="collectionDetail">The new details of the collection (optional)</param>
        /// <returns>UserCollectionDetail</returns>
        public UserCollectionDetail UsersUpdateUserCollection (string dataViewName, string username, int? collectionId, UpsertUserCollectionDetail collectionDetail = null)
        {
             ApiResponse<UserCollectionDetail> localVarResponse = UsersUpdateUserCollectionWithHttpInfo(dataViewName, username, collectionId, collectionDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="collectionDetail">The new details of the collection (optional)</param>
        /// <returns>ApiResponse of UserCollectionDetail</returns>
        public ApiResponse< UserCollectionDetail > UsersUpdateUserCollectionWithHttpInfo (string dataViewName, string username, int? collectionId, UpsertUserCollectionDetail collectionDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersUpdateUserCollection");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUpdateUserCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling UsersApi->UsersUpdateUserCollection");

            var localVarPath = "/{dataViewName}/Users/{username}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionDetail != null && collectionDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(collectionDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collectionDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateUserCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCollectionDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCollectionDetail)));
        }

        /// <summary>
        /// Updates a collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="collectionDetail">The new details of the collection (optional)</param>
        /// <returns>Task of UserCollectionDetail</returns>
        public async System.Threading.Tasks.Task<UserCollectionDetail> UsersUpdateUserCollectionAsync (string dataViewName, string username, int? collectionId, UpsertUserCollectionDetail collectionDetail = null)
        {
             ApiResponse<UserCollectionDetail> localVarResponse = await UsersUpdateUserCollectionAsyncWithHttpInfo(dataViewName, username, collectionId, collectionDetail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a collection 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collection for</param>
        /// <param name="collectionId">The id of the collection to update</param>
        /// <param name="collectionDetail">The new details of the collection (optional)</param>
        /// <returns>Task of ApiResponse (UserCollectionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCollectionDetail>> UsersUpdateUserCollectionAsyncWithHttpInfo (string dataViewName, string username, int? collectionId, UpsertUserCollectionDetail collectionDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersUpdateUserCollection");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUpdateUserCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling UsersApi->UsersUpdateUserCollection");

            var localVarPath = "/{dataViewName}/Users/{username}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionDetail != null && collectionDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(collectionDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collectionDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateUserCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCollectionDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCollectionDetail)));
        }

        /// <summary>
        /// Updates user details for the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="updateUserDetails">The details to update the user with (optional)</param>
        /// <returns>UserSummary</returns>
        public UserSummary UsersUpdateUserDetails (string dataViewName, string username, UpdateUserDetails updateUserDetails = null)
        {
             ApiResponse<UserSummary> localVarResponse = UsersUpdateUserDetailsWithHttpInfo(dataViewName, username, updateUserDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates user details for the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="updateUserDetails">The details to update the user with (optional)</param>
        /// <returns>ApiResponse of UserSummary</returns>
        public ApiResponse< UserSummary > UsersUpdateUserDetailsWithHttpInfo (string dataViewName, string username, UpdateUserDetails updateUserDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersUpdateUserDetails");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUpdateUserDetails");

            var localVarPath = "/{dataViewName}/Users/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (updateUserDetails != null && updateUserDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateUserDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUserDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateUserDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Updates user details for the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="updateUserDetails">The details to update the user with (optional)</param>
        /// <returns>Task of UserSummary</returns>
        public async System.Threading.Tasks.Task<UserSummary> UsersUpdateUserDetailsAsync (string dataViewName, string username, UpdateUserDetails updateUserDetails = null)
        {
             ApiResponse<UserSummary> localVarResponse = await UsersUpdateUserDetailsAsyncWithHttpInfo(dataViewName, username, updateUserDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates user details for the given username 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="updateUserDetails">The details to update the user with (optional)</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersUpdateUserDetailsAsyncWithHttpInfo (string dataViewName, string username, UpdateUserDetails updateUserDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersUpdateUserDetails");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUpdateUserDetails");

            var localVarPath = "/{dataViewName}/Users/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (updateUserDetails != null && updateUserDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateUserDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUserDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateUserDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

    }
}
