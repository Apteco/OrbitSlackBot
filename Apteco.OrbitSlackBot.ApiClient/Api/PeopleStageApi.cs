/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Apteco.OrbitSlackBot.ApiClient.Client;
using Apteco.OrbitSlackBot.ApiClient.Model;

namespace Apteco.OrbitSlackBot.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleStageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the details of a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ChannelDetail</returns>
        ChannelDetail PeopleStageGetPeopleStageChannel (string dataViewName, string systemName, string channelId);

        /// <summary>
        /// Returns the details of a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ApiResponse of ChannelDetail</returns>
        ApiResponse<ChannelDetail> PeopleStageGetPeopleStageChannelWithHttpInfo (string dataViewName, string systemName, string channelId);
        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsChannelSummary</returns>
        PagedResultsChannelSummary PeopleStageGetPeopleStageChannels (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsChannelSummary</returns>
        ApiResponse<PagedResultsChannelSummary> PeopleStageGetPeopleStageChannelsWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ElementDetail</returns>
        ElementDetail PeopleStageGetPeopleStageElement (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns the details of a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ElementDetail</returns>
        ApiResponse<ElementDetail> PeopleStageGetPeopleStageElementWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ChannelStatistics</returns>
        ChannelStatistics PeopleStageGetPeopleStageElementChannelStatistics (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ChannelStatistics</returns>
        ApiResponse<ChannelStatistics> PeopleStageGetPeopleStageElementChannelStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the list of children for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementSummary</returns>
        PagedResultsElementSummary PeopleStageGetPeopleStageElementChildren (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementSummary</returns>
        ApiResponse<PagedResultsElementSummary> PeopleStageGetPeopleStageElementChildrenWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>CommunicationStatistics</returns>
        CommunicationStatistics PeopleStageGetPeopleStageElementCommunicationStatistics (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of CommunicationStatistics</returns>
        ApiResponse<CommunicationStatistics> PeopleStageGetPeopleStageElementCommunicationStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ResponseStatistics</returns>
        ResponseStatistics PeopleStageGetPeopleStageElementResponseStatistics (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ResponseStatistics</returns>
        ApiResponse<ResponseStatistics> PeopleStageGetPeopleStageElementResponseStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ElementStatus</returns>
        ElementStatus PeopleStageGetPeopleStageElementStatus (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ElementStatus</returns>
        ApiResponse<ElementStatus> PeopleStageGetPeopleStageElementStatusWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementStatus</returns>
        PagedResultsElementStatus PeopleStageGetPeopleStageElementStatusForDescendants (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementStatus</returns>
        ApiResponse<PagedResultsElementStatus> PeopleStageGetPeopleStageElementStatusForDescendantsWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementSummary</returns>
        PagedResultsElementSummary PeopleStageGetPeopleStageElements (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementSummary</returns>
        ApiResponse<PagedResultsElementSummary> PeopleStageGetPeopleStageElementsWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>RangeStatistics</returns>
        RangeStatistics PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null);

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>ApiResponse of RangeStatistics</returns>
        ApiResponse<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null);
        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>RangeStatistics</returns>
        RangeStatistics PeopleStageGetPeopleStageRangeStatisticsSync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null);

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>ApiResponse of RangeStatistics</returns>
        ApiResponse<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsSyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null);
        /// <summary>
        /// Returns details of the PeopleStage system for the given system name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>PeopleStageSystemDetail</returns>
        PeopleStageSystemDetail PeopleStageGetPeopleStageSystem (string dataViewName, string systemName);

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of PeopleStageSystemDetail</returns>
        ApiResponse<PeopleStageSystemDetail> PeopleStageGetPeopleStageSystemWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// Returns the list of systems configured to support PeopleStage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsPeopleStageSystemSummary</returns>
        PagedResultsPeopleStageSystemSummary PeopleStageGetPeopleStageSystems (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsPeopleStageSystemSummary</returns>
        ApiResponse<PagedResultsPeopleStageSystemSummary> PeopleStageGetPeopleStageSystemsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns the details of a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ChannelDetail</returns>
        System.Threading.Tasks.Task<ChannelDetail> PeopleStageGetPeopleStageChannelAsync (string dataViewName, string systemName, string channelId);

        /// <summary>
        /// Returns the details of a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ApiResponse (ChannelDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelDetail>> PeopleStageGetPeopleStageChannelAsyncWithHttpInfo (string dataViewName, string systemName, string channelId);
        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsChannelSummary</returns>
        System.Threading.Tasks.Task<PagedResultsChannelSummary> PeopleStageGetPeopleStageChannelsAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsChannelSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsChannelSummary>> PeopleStageGetPeopleStageChannelsAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ElementDetail</returns>
        System.Threading.Tasks.Task<ElementDetail> PeopleStageGetPeopleStageElementAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns the details of a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ElementDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementDetail>> PeopleStageGetPeopleStageElementAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ChannelStatistics</returns>
        System.Threading.Tasks.Task<ChannelStatistics> PeopleStageGetPeopleStageElementChannelStatisticsAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ChannelStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelStatistics>> PeopleStageGetPeopleStageElementChannelStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the list of children for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementSummary</returns>
        System.Threading.Tasks.Task<PagedResultsElementSummary> PeopleStageGetPeopleStageElementChildrenAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsElementSummary>> PeopleStageGetPeopleStageElementChildrenAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of CommunicationStatistics</returns>
        System.Threading.Tasks.Task<CommunicationStatistics> PeopleStageGetPeopleStageElementCommunicationStatisticsAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (CommunicationStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommunicationStatistics>> PeopleStageGetPeopleStageElementCommunicationStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ResponseStatistics</returns>
        System.Threading.Tasks.Task<ResponseStatistics> PeopleStageGetPeopleStageElementResponseStatisticsAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ResponseStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseStatistics>> PeopleStageGetPeopleStageElementResponseStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ElementStatus</returns>
        System.Threading.Tasks.Task<ElementStatus> PeopleStageGetPeopleStageElementStatusAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ElementStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementStatus>> PeopleStageGetPeopleStageElementStatusAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementStatus</returns>
        System.Threading.Tasks.Task<PagedResultsElementStatus> PeopleStageGetPeopleStageElementStatusForDescendantsAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsElementStatus>> PeopleStageGetPeopleStageElementStatusForDescendantsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementSummary</returns>
        System.Threading.Tasks.Task<PagedResultsElementSummary> PeopleStageGetPeopleStageElementsAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsElementSummary>> PeopleStageGetPeopleStageElementsAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of RangeStatistics</returns>
        System.Threading.Tasks.Task<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncAsync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null);

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of ApiResponse (RangeStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<RangeStatistics>> PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null);
        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of RangeStatistics</returns>
        System.Threading.Tasks.Task<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsSyncAsync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null);

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of ApiResponse (RangeStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<RangeStatistics>> PeopleStageGetPeopleStageRangeStatisticsSyncAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null);
        /// <summary>
        /// Returns details of the PeopleStage system for the given system name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of PeopleStageSystemDetail</returns>
        System.Threading.Tasks.Task<PeopleStageSystemDetail> PeopleStageGetPeopleStageSystemAsync (string dataViewName, string systemName);

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (PeopleStageSystemDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeopleStageSystemDetail>> PeopleStageGetPeopleStageSystemAsyncWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// Returns the list of systems configured to support PeopleStage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsPeopleStageSystemSummary</returns>
        System.Threading.Tasks.Task<PagedResultsPeopleStageSystemSummary> PeopleStageGetPeopleStageSystemsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsPeopleStageSystemSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsPeopleStageSystemSummary>> PeopleStageGetPeopleStageSystemsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PeopleStageApi : IPeopleStageApi
    {
        private Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleStageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PeopleStageApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleStageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PeopleStageApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ChannelDetail</returns>
        public ChannelDetail PeopleStageGetPeopleStageChannel (string dataViewName, string systemName, string channelId)
        {
             ApiResponse<ChannelDetail> localVarResponse = PeopleStageGetPeopleStageChannelWithHttpInfo(dataViewName, systemName, channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ApiResponse of ChannelDetail</returns>
        public ApiResponse< ChannelDetail > PeopleStageGetPeopleStageChannelWithHttpInfo (string dataViewName, string systemName, string channelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", Configuration.ApiClient.ParameterToString(channelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelDetail)));
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ChannelDetail</returns>
        public async System.Threading.Tasks.Task<ChannelDetail> PeopleStageGetPeopleStageChannelAsync (string dataViewName, string systemName, string channelId)
        {
             ApiResponse<ChannelDetail> localVarResponse = await PeopleStageGetPeopleStageChannelAsyncWithHttpInfo(dataViewName, systemName, channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ApiResponse (ChannelDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelDetail>> PeopleStageGetPeopleStageChannelAsyncWithHttpInfo (string dataViewName, string systemName, string channelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", Configuration.ApiClient.ParameterToString(channelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelDetail)));
        }

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsChannelSummary</returns>
        public PagedResultsChannelSummary PeopleStageGetPeopleStageChannels (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsChannelSummary> localVarResponse = PeopleStageGetPeopleStageChannelsWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsChannelSummary</returns>
        public ApiResponse< PagedResultsChannelSummary > PeopleStageGetPeopleStageChannelsWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannels");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannels");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsChannelSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsChannelSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsChannelSummary)));
        }

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsChannelSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsChannelSummary> PeopleStageGetPeopleStageChannelsAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsChannelSummary> localVarResponse = await PeopleStageGetPeopleStageChannelsAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsChannelSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsChannelSummary>> PeopleStageGetPeopleStageChannelsAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannels");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannels");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsChannelSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsChannelSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsChannelSummary)));
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ElementDetail</returns>
        public ElementDetail PeopleStageGetPeopleStageElement (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ElementDetail> localVarResponse = PeopleStageGetPeopleStageElementWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ElementDetail</returns>
        public ApiResponse< ElementDetail > PeopleStageGetPeopleStageElementWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementDetail)));
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ElementDetail</returns>
        public async System.Threading.Tasks.Task<ElementDetail> PeopleStageGetPeopleStageElementAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ElementDetail> localVarResponse = await PeopleStageGetPeopleStageElementAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ElementDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ElementDetail>> PeopleStageGetPeopleStageElementAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementDetail)));
        }

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ChannelStatistics</returns>
        public ChannelStatistics PeopleStageGetPeopleStageElementChannelStatistics (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ChannelStatistics> localVarResponse = PeopleStageGetPeopleStageElementChannelStatisticsWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ChannelStatistics</returns>
        public ApiResponse< ChannelStatistics > PeopleStageGetPeopleStageElementChannelStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ChannelStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementChannelStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelStatistics)));
        }

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ChannelStatistics</returns>
        public async System.Threading.Tasks.Task<ChannelStatistics> PeopleStageGetPeopleStageElementChannelStatisticsAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ChannelStatistics> localVarResponse = await PeopleStageGetPeopleStageElementChannelStatisticsAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ChannelStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelStatistics>> PeopleStageGetPeopleStageElementChannelStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ChannelStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementChannelStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelStatistics)));
        }

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementSummary</returns>
        public PagedResultsElementSummary PeopleStageGetPeopleStageElementChildren (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementSummary> localVarResponse = PeopleStageGetPeopleStageElementChildrenWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementSummary</returns>
        public ApiResponse< PagedResultsElementSummary > PeopleStageGetPeopleStageElementChildrenWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementSummary)));
        }

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsElementSummary> PeopleStageGetPeopleStageElementChildrenAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementSummary> localVarResponse = await PeopleStageGetPeopleStageElementChildrenAsyncWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsElementSummary>> PeopleStageGetPeopleStageElementChildrenAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementSummary)));
        }

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>CommunicationStatistics</returns>
        public CommunicationStatistics PeopleStageGetPeopleStageElementCommunicationStatistics (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<CommunicationStatistics> localVarResponse = PeopleStageGetPeopleStageElementCommunicationStatisticsWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of CommunicationStatistics</returns>
        public ApiResponse< CommunicationStatistics > PeopleStageGetPeopleStageElementCommunicationStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CommunicationStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementCommunicationStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommunicationStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommunicationStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommunicationStatistics)));
        }

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of CommunicationStatistics</returns>
        public async System.Threading.Tasks.Task<CommunicationStatistics> PeopleStageGetPeopleStageElementCommunicationStatisticsAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<CommunicationStatistics> localVarResponse = await PeopleStageGetPeopleStageElementCommunicationStatisticsAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (CommunicationStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommunicationStatistics>> PeopleStageGetPeopleStageElementCommunicationStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CommunicationStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementCommunicationStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommunicationStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommunicationStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommunicationStatistics)));
        }

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ResponseStatistics</returns>
        public ResponseStatistics PeopleStageGetPeopleStageElementResponseStatistics (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ResponseStatistics> localVarResponse = PeopleStageGetPeopleStageElementResponseStatisticsWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ResponseStatistics</returns>
        public ApiResponse< ResponseStatistics > PeopleStageGetPeopleStageElementResponseStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ResponseStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementResponseStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStatistics)));
        }

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ResponseStatistics</returns>
        public async System.Threading.Tasks.Task<ResponseStatistics> PeopleStageGetPeopleStageElementResponseStatisticsAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ResponseStatistics> localVarResponse = await PeopleStageGetPeopleStageElementResponseStatisticsAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ResponseStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseStatistics>> PeopleStageGetPeopleStageElementResponseStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ResponseStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementResponseStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStatistics)));
        }

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ElementStatus</returns>
        public ElementStatus PeopleStageGetPeopleStageElementStatus (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ElementStatus> localVarResponse = PeopleStageGetPeopleStageElementStatusWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ElementStatus</returns>
        public ApiResponse< ElementStatus > PeopleStageGetPeopleStageElementStatusWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementStatus)));
        }

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ElementStatus</returns>
        public async System.Threading.Tasks.Task<ElementStatus> PeopleStageGetPeopleStageElementStatusAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ElementStatus> localVarResponse = await PeopleStageGetPeopleStageElementStatusAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ElementStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ElementStatus>> PeopleStageGetPeopleStageElementStatusAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementStatus)));
        }

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementStatus</returns>
        public PagedResultsElementStatus PeopleStageGetPeopleStageElementStatusForDescendants (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementStatus> localVarResponse = PeopleStageGetPeopleStageElementStatusForDescendantsWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementStatus</returns>
        public ApiResponse< PagedResultsElementStatus > PeopleStageGetPeopleStageElementStatusForDescendantsWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Status/Descendants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementStatusForDescendants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementStatus)));
        }

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementStatus</returns>
        public async System.Threading.Tasks.Task<PagedResultsElementStatus> PeopleStageGetPeopleStageElementStatusForDescendantsAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementStatus> localVarResponse = await PeopleStageGetPeopleStageElementStatusForDescendantsAsyncWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsElementStatus>> PeopleStageGetPeopleStageElementStatusForDescendantsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Status/Descendants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementStatusForDescendants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementStatus)));
        }

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementSummary</returns>
        public PagedResultsElementSummary PeopleStageGetPeopleStageElements (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementSummary> localVarResponse = PeopleStageGetPeopleStageElementsWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementSummary</returns>
        public ApiResponse< PagedResultsElementSummary > PeopleStageGetPeopleStageElementsWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElements");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElements");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementSummary)));
        }

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsElementSummary> PeopleStageGetPeopleStageElementsAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementSummary> localVarResponse = await PeopleStageGetPeopleStageElementsAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsElementSummary>> PeopleStageGetPeopleStageElementsAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElements");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElements");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementSummary)));
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>RangeStatistics</returns>
        public RangeStatistics PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null)
        {
             ApiResponse<RangeStatistics> localVarResponse = PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncWithHttpInfo(dataViewName, systemName, elementId, timeoutInSeconds, filter, orderBy, offset, count, dateRange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>ApiResponse of RangeStatistics</returns>
        public ApiResponse< RangeStatistics > PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RangeStats/Descendants/Sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange", dateRange)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeStatistics)));
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of RangeStatistics</returns>
        public async System.Threading.Tasks.Task<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncAsync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null)
        {
             ApiResponse<RangeStatistics> localVarResponse = await PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncAsyncWithHttpInfo(dataViewName, systemName, elementId, timeoutInSeconds, filter, orderBy, offset, count, dateRange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of ApiResponse (RangeStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RangeStatistics>> PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RangeStats/Descendants/Sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange", dateRange)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeStatistics)));
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>RangeStatistics</returns>
        public RangeStatistics PeopleStageGetPeopleStageRangeStatisticsSync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null)
        {
             ApiResponse<RangeStatistics> localVarResponse = PeopleStageGetPeopleStageRangeStatisticsSyncWithHttpInfo(dataViewName, systemName, elementId, timeoutInSeconds, dateRange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>ApiResponse of RangeStatistics</returns>
        public ApiResponse< RangeStatistics > PeopleStageGetPeopleStageRangeStatisticsSyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RangeStats/Sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange", dateRange)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageRangeStatisticsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeStatistics)));
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of RangeStatistics</returns>
        public async System.Threading.Tasks.Task<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsSyncAsync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null)
        {
             ApiResponse<RangeStatistics> localVarResponse = await PeopleStageGetPeopleStageRangeStatisticsSyncAsyncWithHttpInfo(dataViewName, systemName, elementId, timeoutInSeconds, dateRange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of ApiResponse (RangeStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RangeStatistics>> PeopleStageGetPeopleStageRangeStatisticsSyncAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RangeStats/Sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange", dateRange)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageRangeStatisticsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeStatistics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeStatistics)));
        }

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>PeopleStageSystemDetail</returns>
        public PeopleStageSystemDetail PeopleStageGetPeopleStageSystem (string dataViewName, string systemName)
        {
             ApiResponse<PeopleStageSystemDetail> localVarResponse = PeopleStageGetPeopleStageSystemWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of PeopleStageSystemDetail</returns>
        public ApiResponse< PeopleStageSystemDetail > PeopleStageGetPeopleStageSystemWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystem");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeopleStageSystemDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeopleStageSystemDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeopleStageSystemDetail)));
        }

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of PeopleStageSystemDetail</returns>
        public async System.Threading.Tasks.Task<PeopleStageSystemDetail> PeopleStageGetPeopleStageSystemAsync (string dataViewName, string systemName)
        {
             ApiResponse<PeopleStageSystemDetail> localVarResponse = await PeopleStageGetPeopleStageSystemAsyncWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (PeopleStageSystemDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PeopleStageSystemDetail>> PeopleStageGetPeopleStageSystemAsyncWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystem");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeopleStageSystemDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeopleStageSystemDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeopleStageSystemDetail)));
        }

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsPeopleStageSystemSummary</returns>
        public PagedResultsPeopleStageSystemSummary PeopleStageGetPeopleStageSystems (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsPeopleStageSystemSummary> localVarResponse = PeopleStageGetPeopleStageSystemsWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsPeopleStageSystemSummary</returns>
        public ApiResponse< PagedResultsPeopleStageSystemSummary > PeopleStageGetPeopleStageSystemsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystems");

            var localVarPath = "/{dataViewName}/PeopleStage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsPeopleStageSystemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsPeopleStageSystemSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsPeopleStageSystemSummary)));
        }

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsPeopleStageSystemSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsPeopleStageSystemSummary> PeopleStageGetPeopleStageSystemsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsPeopleStageSystemSummary> localVarResponse = await PeopleStageGetPeopleStageSystemsAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsPeopleStageSystemSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsPeopleStageSystemSummary>> PeopleStageGetPeopleStageSystemsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystems");

            var localVarPath = "/{dataViewName}/PeopleStage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsPeopleStageSystemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsPeopleStageSystemSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsPeopleStageSystemSummary)));
        }

    }
}
