/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Apteco.OrbitSlackBot.ApiClient.Client;
using Apteco.OrbitSlackBot.ApiClient.Model;

namespace Apteco.OrbitSlackBot.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionLabelsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// UNDER DEVELOPMENT: Returns a summary of the collections that this label is applied to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionLabelAssociationDetails</returns>
        PagedResultsCollectionLabelAssociationDetails CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGet (string dataViewName, int? collectionLabelId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a summary of the collections that this label is applied to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionLabelAssociationDetails</returns>
        ApiResponse<PagedResultsCollectionLabelAssociationDetails> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGetWithHttpInfo (string dataViewName, int? collectionLabelId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Updates one or more associations between a label and the collections that it is applied to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>PagedResultsCollectionLabelAssociationDetails</returns>
        PagedResultsCollectionLabelAssociationDetails CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatch (string dataViewName, int? collectionLabelId);

        /// <summary>
        /// UNDER DEVELOPMENT: Updates one or more associations between a label and the collections that it is applied to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>ApiResponse of PagedResultsCollectionLabelAssociationDetails</returns>
        ApiResponse<PagedResultsCollectionLabelAssociationDetails> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatchWithHttpInfo (string dataViewName, int? collectionLabelId);
        /// <summary>
        /// UNDER DEVELOPMENT: Deletes the specified collection label
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to delete</param>
        /// <returns></returns>
        void CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDelete (string dataViewName, int? collectionLabelId);

        /// <summary>
        /// UNDER DEVELOPMENT: Deletes the specified collection label
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDeleteWithHttpInfo (string dataViewName, int? collectionLabelId);
        /// <summary>
        /// UNDER DEVELOPMENT: Returns the details of a particular collection label
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>CollectionLabelDetail</returns>
        CollectionLabelDetail CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGet (string dataViewName, int? collectionLabelId);

        /// <summary>
        /// UNDER DEVELOPMENT: Returns the details of a particular collection label
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>ApiResponse of CollectionLabelDetail</returns>
        ApiResponse<CollectionLabelDetail> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGetWithHttpInfo (string dataViewName, int? collectionLabelId);
        /// <summary>
        /// UNDER DEVELOPMENT: Updates the details of a particular collection label.  If you don&#39;t have an id for the  collection label then POST to the /CollectionLabels URL to create a new one.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to add/update</param>
        /// <param name="collectionLabelDetails">The details for the collection label to add/update (optional)</param>
        /// <returns>CollectionLabelDetail</returns>
        CollectionLabelDetail CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPut (string dataViewName, int? collectionLabelId, UpsertCollectionDetail collectionLabelDetails = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Updates the details of a particular collection label.  If you don&#39;t have an id for the  collection label then POST to the /CollectionLabels URL to create a new one.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to add/update</param>
        /// <param name="collectionLabelDetails">The details for the collection label to add/update (optional)</param>
        /// <returns>ApiResponse of CollectionLabelDetail</returns>
        ApiResponse<CollectionLabelDetail> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPutWithHttpInfo (string dataViewName, int? collectionLabelId, UpsertCollectionDetail collectionLabelDetails = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Gets summary information about each collection label in the system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionLabelSummary</returns>
        PagedResultsCollectionLabelSummary CollectionLabelsByDataViewNameCollectionLabelsGet (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Gets summary information about each collection label in the system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionLabelSummary</returns>
        ApiResponse<PagedResultsCollectionLabelSummary> CollectionLabelsByDataViewNameCollectionLabelsGetWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Creates a new collection label from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelDetails">The details for the collection label to create.  If you want              to update a specific collection label then PUT to the /CollectionLabels/{collectionLabelId} URL (optional)</param>
        /// <returns>UpsertCollectionLabelDetails</returns>
        UpsertCollectionLabelDetails CollectionLabelsByDataViewNameCollectionLabelsPost (string dataViewName, UpsertCollectionLabelDetails collectionLabelDetails = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Creates a new collection label from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelDetails">The details for the collection label to create.  If you want              to update a specific collection label then PUT to the /CollectionLabels/{collectionLabelId} URL (optional)</param>
        /// <returns>ApiResponse of UpsertCollectionLabelDetails</returns>
        ApiResponse<UpsertCollectionLabelDetails> CollectionLabelsByDataViewNameCollectionLabelsPostWithHttpInfo (string dataViewName, UpsertCollectionLabelDetails collectionLabelDetails = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// UNDER DEVELOPMENT: Returns a summary of the collections that this label is applied to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionLabelAssociationDetails</returns>
        System.Threading.Tasks.Task<PagedResultsCollectionLabelAssociationDetails> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGetAsync (string dataViewName, int? collectionLabelId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a summary of the collections that this label is applied to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionLabelAssociationDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionLabelAssociationDetails>> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGetAsyncWithHttpInfo (string dataViewName, int? collectionLabelId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Updates one or more associations between a label and the collections that it is applied to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>Task of PagedResultsCollectionLabelAssociationDetails</returns>
        System.Threading.Tasks.Task<PagedResultsCollectionLabelAssociationDetails> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatchAsync (string dataViewName, int? collectionLabelId);

        /// <summary>
        /// UNDER DEVELOPMENT: Updates one or more associations between a label and the collections that it is applied to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionLabelAssociationDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionLabelAssociationDetails>> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatchAsyncWithHttpInfo (string dataViewName, int? collectionLabelId);
        /// <summary>
        /// UNDER DEVELOPMENT: Deletes the specified collection label
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDeleteAsync (string dataViewName, int? collectionLabelId);

        /// <summary>
        /// UNDER DEVELOPMENT: Deletes the specified collection label
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDeleteAsyncWithHttpInfo (string dataViewName, int? collectionLabelId);
        /// <summary>
        /// UNDER DEVELOPMENT: Returns the details of a particular collection label
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>Task of CollectionLabelDetail</returns>
        System.Threading.Tasks.Task<CollectionLabelDetail> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGetAsync (string dataViewName, int? collectionLabelId);

        /// <summary>
        /// UNDER DEVELOPMENT: Returns the details of a particular collection label
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>Task of ApiResponse (CollectionLabelDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionLabelDetail>> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGetAsyncWithHttpInfo (string dataViewName, int? collectionLabelId);
        /// <summary>
        /// UNDER DEVELOPMENT: Updates the details of a particular collection label.  If you don&#39;t have an id for the  collection label then POST to the /CollectionLabels URL to create a new one.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to add/update</param>
        /// <param name="collectionLabelDetails">The details for the collection label to add/update (optional)</param>
        /// <returns>Task of CollectionLabelDetail</returns>
        System.Threading.Tasks.Task<CollectionLabelDetail> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPutAsync (string dataViewName, int? collectionLabelId, UpsertCollectionDetail collectionLabelDetails = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Updates the details of a particular collection label.  If you don&#39;t have an id for the  collection label then POST to the /CollectionLabels URL to create a new one.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to add/update</param>
        /// <param name="collectionLabelDetails">The details for the collection label to add/update (optional)</param>
        /// <returns>Task of ApiResponse (CollectionLabelDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionLabelDetail>> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPutAsyncWithHttpInfo (string dataViewName, int? collectionLabelId, UpsertCollectionDetail collectionLabelDetails = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Gets summary information about each collection label in the system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionLabelSummary</returns>
        System.Threading.Tasks.Task<PagedResultsCollectionLabelSummary> CollectionLabelsByDataViewNameCollectionLabelsGetAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Gets summary information about each collection label in the system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionLabelSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionLabelSummary>> CollectionLabelsByDataViewNameCollectionLabelsGetAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Creates a new collection label from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelDetails">The details for the collection label to create.  If you want              to update a specific collection label then PUT to the /CollectionLabels/{collectionLabelId} URL (optional)</param>
        /// <returns>Task of UpsertCollectionLabelDetails</returns>
        System.Threading.Tasks.Task<UpsertCollectionLabelDetails> CollectionLabelsByDataViewNameCollectionLabelsPostAsync (string dataViewName, UpsertCollectionLabelDetails collectionLabelDetails = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Creates a new collection label from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelDetails">The details for the collection label to create.  If you want              to update a specific collection label then PUT to the /CollectionLabels/{collectionLabelId} URL (optional)</param>
        /// <returns>Task of ApiResponse (UpsertCollectionLabelDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpsertCollectionLabelDetails>> CollectionLabelsByDataViewNameCollectionLabelsPostAsyncWithHttpInfo (string dataViewName, UpsertCollectionLabelDetails collectionLabelDetails = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectionLabelsApi : ICollectionLabelsApi
    {
        private Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionLabelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionLabelsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionLabelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollectionLabelsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a summary of the collections that this label is applied to UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionLabelAssociationDetails</returns>
        public PagedResultsCollectionLabelAssociationDetails CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGet (string dataViewName, int? collectionLabelId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionLabelAssociationDetails> localVarResponse = CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGetWithHttpInfo(dataViewName, collectionLabelId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a summary of the collections that this label is applied to UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionLabelAssociationDetails</returns>
        public ApiResponse< PagedResultsCollectionLabelAssociationDetails > CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGetWithHttpInfo (string dataViewName, int? collectionLabelId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGet");
            // verify the required parameter 'collectionLabelId' is set
            if (collectionLabelId == null)
                throw new ApiException(400, "Missing required parameter 'collectionLabelId' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGet");

            var localVarPath = "/{dataViewName}/CollectionLabels/{collectionLabelId}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelId != null) localVarPathParams.Add("collectionLabelId", Configuration.ApiClient.ParameterToString(collectionLabelId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionLabelAssociationDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsCollectionLabelAssociationDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionLabelAssociationDetails)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a summary of the collections that this label is applied to UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionLabelAssociationDetails</returns>
        public async System.Threading.Tasks.Task<PagedResultsCollectionLabelAssociationDetails> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGetAsync (string dataViewName, int? collectionLabelId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionLabelAssociationDetails> localVarResponse = await CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGetAsyncWithHttpInfo(dataViewName, collectionLabelId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a summary of the collections that this label is applied to UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionLabelAssociationDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionLabelAssociationDetails>> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGetAsyncWithHttpInfo (string dataViewName, int? collectionLabelId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGet");
            // verify the required parameter 'collectionLabelId' is set
            if (collectionLabelId == null)
                throw new ApiException(400, "Missing required parameter 'collectionLabelId' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGet");

            var localVarPath = "/{dataViewName}/CollectionLabels/{collectionLabelId}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelId != null) localVarPathParams.Add("collectionLabelId", Configuration.ApiClient.ParameterToString(collectionLabelId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionLabelAssociationDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsCollectionLabelAssociationDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionLabelAssociationDetails)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Updates one or more associations between a label and the collections that it is applied to UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>PagedResultsCollectionLabelAssociationDetails</returns>
        public PagedResultsCollectionLabelAssociationDetails CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatch (string dataViewName, int? collectionLabelId)
        {
             ApiResponse<PagedResultsCollectionLabelAssociationDetails> localVarResponse = CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatchWithHttpInfo(dataViewName, collectionLabelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Updates one or more associations between a label and the collections that it is applied to UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>ApiResponse of PagedResultsCollectionLabelAssociationDetails</returns>
        public ApiResponse< PagedResultsCollectionLabelAssociationDetails > CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatchWithHttpInfo (string dataViewName, int? collectionLabelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatch");
            // verify the required parameter 'collectionLabelId' is set
            if (collectionLabelId == null)
                throw new ApiException(400, "Missing required parameter 'collectionLabelId' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatch");

            var localVarPath = "/{dataViewName}/CollectionLabels/{collectionLabelId}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelId != null) localVarPathParams.Add("collectionLabelId", Configuration.ApiClient.ParameterToString(collectionLabelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionLabelAssociationDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsCollectionLabelAssociationDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionLabelAssociationDetails)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Updates one or more associations between a label and the collections that it is applied to UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>Task of PagedResultsCollectionLabelAssociationDetails</returns>
        public async System.Threading.Tasks.Task<PagedResultsCollectionLabelAssociationDetails> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatchAsync (string dataViewName, int? collectionLabelId)
        {
             ApiResponse<PagedResultsCollectionLabelAssociationDetails> localVarResponse = await CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatchAsyncWithHttpInfo(dataViewName, collectionLabelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Updates one or more associations between a label and the collections that it is applied to UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionLabelAssociationDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionLabelAssociationDetails>> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatchAsyncWithHttpInfo (string dataViewName, int? collectionLabelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatch");
            // verify the required parameter 'collectionLabelId' is set
            if (collectionLabelId == null)
                throw new ApiException(400, "Missing required parameter 'collectionLabelId' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatch");

            var localVarPath = "/{dataViewName}/CollectionLabels/{collectionLabelId}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelId != null) localVarPathParams.Add("collectionLabelId", Configuration.ApiClient.ParameterToString(collectionLabelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdCollectionsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionLabelAssociationDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsCollectionLabelAssociationDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionLabelAssociationDetails)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Deletes the specified collection label UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to delete</param>
        /// <returns></returns>
        public void CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDelete (string dataViewName, int? collectionLabelId)
        {
             CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDeleteWithHttpInfo(dataViewName, collectionLabelId);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Deletes the specified collection label UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDeleteWithHttpInfo (string dataViewName, int? collectionLabelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDelete");
            // verify the required parameter 'collectionLabelId' is set
            if (collectionLabelId == null)
                throw new ApiException(400, "Missing required parameter 'collectionLabelId' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDelete");

            var localVarPath = "/{dataViewName}/CollectionLabels/{collectionLabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelId != null) localVarPathParams.Add("collectionLabelId", Configuration.ApiClient.ParameterToString(collectionLabelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Deletes the specified collection label UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDeleteAsync (string dataViewName, int? collectionLabelId)
        {
             await CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDeleteAsyncWithHttpInfo(dataViewName, collectionLabelId);

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Deletes the specified collection label UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDeleteAsyncWithHttpInfo (string dataViewName, int? collectionLabelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDelete");
            // verify the required parameter 'collectionLabelId' is set
            if (collectionLabelId == null)
                throw new ApiException(400, "Missing required parameter 'collectionLabelId' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDelete");

            var localVarPath = "/{dataViewName}/CollectionLabels/{collectionLabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelId != null) localVarPathParams.Add("collectionLabelId", Configuration.ApiClient.ParameterToString(collectionLabelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns the details of a particular collection label UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>CollectionLabelDetail</returns>
        public CollectionLabelDetail CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGet (string dataViewName, int? collectionLabelId)
        {
             ApiResponse<CollectionLabelDetail> localVarResponse = CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGetWithHttpInfo(dataViewName, collectionLabelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns the details of a particular collection label UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>ApiResponse of CollectionLabelDetail</returns>
        public ApiResponse< CollectionLabelDetail > CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGetWithHttpInfo (string dataViewName, int? collectionLabelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGet");
            // verify the required parameter 'collectionLabelId' is set
            if (collectionLabelId == null)
                throw new ApiException(400, "Missing required parameter 'collectionLabelId' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGet");

            var localVarPath = "/{dataViewName}/CollectionLabels/{collectionLabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelId != null) localVarPathParams.Add("collectionLabelId", Configuration.ApiClient.ParameterToString(collectionLabelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionLabelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionLabelDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionLabelDetail)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns the details of a particular collection label UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>Task of CollectionLabelDetail</returns>
        public async System.Threading.Tasks.Task<CollectionLabelDetail> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGetAsync (string dataViewName, int? collectionLabelId)
        {
             ApiResponse<CollectionLabelDetail> localVarResponse = await CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGetAsyncWithHttpInfo(dataViewName, collectionLabelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns the details of a particular collection label UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to view</param>
        /// <returns>Task of ApiResponse (CollectionLabelDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionLabelDetail>> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGetAsyncWithHttpInfo (string dataViewName, int? collectionLabelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGet");
            // verify the required parameter 'collectionLabelId' is set
            if (collectionLabelId == null)
                throw new ApiException(400, "Missing required parameter 'collectionLabelId' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGet");

            var localVarPath = "/{dataViewName}/CollectionLabels/{collectionLabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelId != null) localVarPathParams.Add("collectionLabelId", Configuration.ApiClient.ParameterToString(collectionLabelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionLabelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionLabelDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionLabelDetail)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Updates the details of a particular collection label.  If you don&#39;t have an id for the  collection label then POST to the /CollectionLabels URL to create a new one. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to add/update</param>
        /// <param name="collectionLabelDetails">The details for the collection label to add/update (optional)</param>
        /// <returns>CollectionLabelDetail</returns>
        public CollectionLabelDetail CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPut (string dataViewName, int? collectionLabelId, UpsertCollectionDetail collectionLabelDetails = null)
        {
             ApiResponse<CollectionLabelDetail> localVarResponse = CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPutWithHttpInfo(dataViewName, collectionLabelId, collectionLabelDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Updates the details of a particular collection label.  If you don&#39;t have an id for the  collection label then POST to the /CollectionLabels URL to create a new one. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to add/update</param>
        /// <param name="collectionLabelDetails">The details for the collection label to add/update (optional)</param>
        /// <returns>ApiResponse of CollectionLabelDetail</returns>
        public ApiResponse< CollectionLabelDetail > CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPutWithHttpInfo (string dataViewName, int? collectionLabelId, UpsertCollectionDetail collectionLabelDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPut");
            // verify the required parameter 'collectionLabelId' is set
            if (collectionLabelId == null)
                throw new ApiException(400, "Missing required parameter 'collectionLabelId' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPut");

            var localVarPath = "/{dataViewName}/CollectionLabels/{collectionLabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelId != null) localVarPathParams.Add("collectionLabelId", Configuration.ApiClient.ParameterToString(collectionLabelId)); // path parameter
            if (collectionLabelDetails != null && collectionLabelDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(collectionLabelDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collectionLabelDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionLabelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionLabelDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionLabelDetail)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Updates the details of a particular collection label.  If you don&#39;t have an id for the  collection label then POST to the /CollectionLabels URL to create a new one. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to add/update</param>
        /// <param name="collectionLabelDetails">The details for the collection label to add/update (optional)</param>
        /// <returns>Task of CollectionLabelDetail</returns>
        public async System.Threading.Tasks.Task<CollectionLabelDetail> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPutAsync (string dataViewName, int? collectionLabelId, UpsertCollectionDetail collectionLabelDetails = null)
        {
             ApiResponse<CollectionLabelDetail> localVarResponse = await CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPutAsyncWithHttpInfo(dataViewName, collectionLabelId, collectionLabelDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Updates the details of a particular collection label.  If you don&#39;t have an id for the  collection label then POST to the /CollectionLabels URL to create a new one. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelId">The id of the collection label to add/update</param>
        /// <param name="collectionLabelDetails">The details for the collection label to add/update (optional)</param>
        /// <returns>Task of ApiResponse (CollectionLabelDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionLabelDetail>> CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPutAsyncWithHttpInfo (string dataViewName, int? collectionLabelId, UpsertCollectionDetail collectionLabelDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPut");
            // verify the required parameter 'collectionLabelId' is set
            if (collectionLabelId == null)
                throw new ApiException(400, "Missing required parameter 'collectionLabelId' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPut");

            var localVarPath = "/{dataViewName}/CollectionLabels/{collectionLabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelId != null) localVarPathParams.Add("collectionLabelId", Configuration.ApiClient.ParameterToString(collectionLabelId)); // path parameter
            if (collectionLabelDetails != null && collectionLabelDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(collectionLabelDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collectionLabelDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsByCollectionLabelIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionLabelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionLabelDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionLabelDetail)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Gets summary information about each collection label in the system.  This endpoint is only available for admin users. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionLabelSummary</returns>
        public PagedResultsCollectionLabelSummary CollectionLabelsByDataViewNameCollectionLabelsGet (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionLabelSummary> localVarResponse = CollectionLabelsByDataViewNameCollectionLabelsGetWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Gets summary information about each collection label in the system.  This endpoint is only available for admin users. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionLabelSummary</returns>
        public ApiResponse< PagedResultsCollectionLabelSummary > CollectionLabelsByDataViewNameCollectionLabelsGetWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsGet");

            var localVarPath = "/{dataViewName}/CollectionLabels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionLabelSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsCollectionLabelSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionLabelSummary)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Gets summary information about each collection label in the system.  This endpoint is only available for admin users. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionLabelSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsCollectionLabelSummary> CollectionLabelsByDataViewNameCollectionLabelsGetAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionLabelSummary> localVarResponse = await CollectionLabelsByDataViewNameCollectionLabelsGetAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Gets summary information about each collection label in the system.  This endpoint is only available for admin users. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionLabelSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionLabelSummary>> CollectionLabelsByDataViewNameCollectionLabelsGetAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsGet");

            var localVarPath = "/{dataViewName}/CollectionLabels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionLabelSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsCollectionLabelSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionLabelSummary)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Creates a new collection label from the given details for the logged in user. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelDetails">The details for the collection label to create.  If you want              to update a specific collection label then PUT to the /CollectionLabels/{collectionLabelId} URL (optional)</param>
        /// <returns>UpsertCollectionLabelDetails</returns>
        public UpsertCollectionLabelDetails CollectionLabelsByDataViewNameCollectionLabelsPost (string dataViewName, UpsertCollectionLabelDetails collectionLabelDetails = null)
        {
             ApiResponse<UpsertCollectionLabelDetails> localVarResponse = CollectionLabelsByDataViewNameCollectionLabelsPostWithHttpInfo(dataViewName, collectionLabelDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Creates a new collection label from the given details for the logged in user. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelDetails">The details for the collection label to create.  If you want              to update a specific collection label then PUT to the /CollectionLabels/{collectionLabelId} URL (optional)</param>
        /// <returns>ApiResponse of UpsertCollectionLabelDetails</returns>
        public ApiResponse< UpsertCollectionLabelDetails > CollectionLabelsByDataViewNameCollectionLabelsPostWithHttpInfo (string dataViewName, UpsertCollectionLabelDetails collectionLabelDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsPost");

            var localVarPath = "/{dataViewName}/CollectionLabels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelDetails != null && collectionLabelDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(collectionLabelDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collectionLabelDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertCollectionLabelDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpsertCollectionLabelDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertCollectionLabelDetails)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Creates a new collection label from the given details for the logged in user. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelDetails">The details for the collection label to create.  If you want              to update a specific collection label then PUT to the /CollectionLabels/{collectionLabelId} URL (optional)</param>
        /// <returns>Task of UpsertCollectionLabelDetails</returns>
        public async System.Threading.Tasks.Task<UpsertCollectionLabelDetails> CollectionLabelsByDataViewNameCollectionLabelsPostAsync (string dataViewName, UpsertCollectionLabelDetails collectionLabelDetails = null)
        {
             ApiResponse<UpsertCollectionLabelDetails> localVarResponse = await CollectionLabelsByDataViewNameCollectionLabelsPostAsyncWithHttpInfo(dataViewName, collectionLabelDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Creates a new collection label from the given details for the logged in user. UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionLabelDetails">The details for the collection label to create.  If you want              to update a specific collection label then PUT to the /CollectionLabels/{collectionLabelId} URL (optional)</param>
        /// <returns>Task of ApiResponse (UpsertCollectionLabelDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpsertCollectionLabelDetails>> CollectionLabelsByDataViewNameCollectionLabelsPostAsyncWithHttpInfo (string dataViewName, UpsertCollectionLabelDetails collectionLabelDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionLabelsApi->CollectionLabelsByDataViewNameCollectionLabelsPost");

            var localVarPath = "/{dataViewName}/CollectionLabels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionLabelDetails != null && collectionLabelDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(collectionLabelDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collectionLabelDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionLabelsByDataViewNameCollectionLabelsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertCollectionLabelDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpsertCollectionLabelDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertCollectionLabelDetails)));
        }

    }
}
