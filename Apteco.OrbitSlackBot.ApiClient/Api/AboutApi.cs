/* 
 * FastStats API
 *
 * An API to allow access to FastStats resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Apteco.OrbitSlackBot.ApiClient.Client;
using Apteco.OrbitSlackBot.ApiClient.Model;

namespace Apteco.OrbitSlackBot.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAboutApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Message</returns>
        Message AboutExampleExperimentalResource ();

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> AboutExampleExperimentalResourceWithHttpInfo ();
        /// <summary>
        /// Get the list of DataViews that are available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewDetails</returns>
        PagedResultsDataViewDetails AboutGetDataViews (string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewDetails</returns>
        ApiResponse<PagedResultsDataViewDetails> AboutGetDataViewsWithHttpInfo (string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewDetails</returns>
        PagedResultsDataViewDetails AboutGetDataViewsForDomain (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewDetails</returns>
        ApiResponse<PagedResultsDataViewDetails> AboutGetDataViewsForDomainWithHttpInfo (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewDetails</returns>
        PagedResultsDataViewDetails AboutGetDataViewsForSystemName (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewDetails</returns>
        ApiResponse<PagedResultsDataViewDetails> AboutGetDataViewsForSystemNameWithHttpInfo (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns version information about the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>VersionDetails</returns>
        VersionDetails AboutGetVersion ();

        /// <summary>
        /// Returns version information about the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of VersionDetails</returns>
        ApiResponse<VersionDetails> AboutGetVersionWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> AboutExampleExperimentalResourceAsync ();

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> AboutExampleExperimentalResourceAsyncWithHttpInfo ();
        /// <summary>
        /// Get the list of DataViews that are available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewDetails</returns>
        System.Threading.Tasks.Task<PagedResultsDataViewDetails> AboutGetDataViewsAsync (string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewDetails>> AboutGetDataViewsAsyncWithHttpInfo (string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewDetails</returns>
        System.Threading.Tasks.Task<PagedResultsDataViewDetails> AboutGetDataViewsForDomainAsync (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewDetails>> AboutGetDataViewsForDomainAsyncWithHttpInfo (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewDetails</returns>
        System.Threading.Tasks.Task<PagedResultsDataViewDetails> AboutGetDataViewsForSystemNameAsync (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewDetails>> AboutGetDataViewsForSystemNameAsyncWithHttpInfo (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns version information about the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of VersionDetails</returns>
        System.Threading.Tasks.Task<VersionDetails> AboutGetVersionAsync ();

        /// <summary>
        /// Returns version information about the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (VersionDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionDetails>> AboutGetVersionAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AboutApi : IAboutApi
    {
        private Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AboutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AboutApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AboutApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AboutApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.OrbitSlackBot.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.OrbitSlackBot.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Message</returns>
        public Message AboutExampleExperimentalResource ()
        {
             ApiResponse<Message> localVarResponse = AboutExampleExperimentalResourceWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Message</returns>
        public ApiResponse< Message > AboutExampleExperimentalResourceWithHttpInfo ()
        {

            var localVarPath = "/About/ExampleExperimentalResource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutExampleExperimentalResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Message) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> AboutExampleExperimentalResourceAsync ()
        {
             ApiResponse<Message> localVarResponse = await AboutExampleExperimentalResourceAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Message>> AboutExampleExperimentalResourceAsyncWithHttpInfo ()
        {

            var localVarPath = "/About/ExampleExperimentalResource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutExampleExperimentalResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Message) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// Get the list of DataViews that are available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewDetails</returns>
        public PagedResultsDataViewDetails AboutGetDataViews (string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewDetails> localVarResponse = AboutGetDataViewsWithHttpInfo(filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of DataViews that are available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewDetails</returns>
        public ApiResponse< PagedResultsDataViewDetails > AboutGetDataViewsWithHttpInfo (string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {

            var localVarPath = "/About/DataViews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsDataViewDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewDetails)));
        }

        /// <summary>
        /// Get the list of DataViews that are available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewDetails</returns>
        public async System.Threading.Tasks.Task<PagedResultsDataViewDetails> AboutGetDataViewsAsync (string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewDetails> localVarResponse = await AboutGetDataViewsAsyncWithHttpInfo(filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of DataViews that are available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewDetails>> AboutGetDataViewsAsyncWithHttpInfo (string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {

            var localVarPath = "/About/DataViews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsDataViewDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewDetails)));
        }

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewDetails</returns>
        public PagedResultsDataViewDetails AboutGetDataViewsForDomain (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewDetails> localVarResponse = AboutGetDataViewsForDomainWithHttpInfo(domain, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewDetails</returns>
        public ApiResponse< PagedResultsDataViewDetails > AboutGetDataViewsForDomainWithHttpInfo (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling AboutApi->AboutGetDataViewsForDomain");

            var localVarPath = "/About/DataViews/Domains/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViewsForDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsDataViewDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewDetails)));
        }

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewDetails</returns>
        public async System.Threading.Tasks.Task<PagedResultsDataViewDetails> AboutGetDataViewsForDomainAsync (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewDetails> localVarResponse = await AboutGetDataViewsForDomainAsyncWithHttpInfo(domain, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewDetails>> AboutGetDataViewsForDomainAsyncWithHttpInfo (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling AboutApi->AboutGetDataViewsForDomain");

            var localVarPath = "/About/DataViews/Domains/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViewsForDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsDataViewDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewDetails)));
        }

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewDetails</returns>
        public PagedResultsDataViewDetails AboutGetDataViewsForSystemName (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewDetails> localVarResponse = AboutGetDataViewsForSystemNameWithHttpInfo(systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewDetails</returns>
        public ApiResponse< PagedResultsDataViewDetails > AboutGetDataViewsForSystemNameWithHttpInfo (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling AboutApi->AboutGetDataViewsForSystemName");

            var localVarPath = "/About/DataViews/Systems/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViewsForSystemName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsDataViewDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewDetails)));
        }

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewDetails</returns>
        public async System.Threading.Tasks.Task<PagedResultsDataViewDetails> AboutGetDataViewsForSystemNameAsync (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewDetails> localVarResponse = await AboutGetDataViewsForSystemNameAsyncWithHttpInfo(systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system. 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewDetails>> AboutGetDataViewsForSystemNameAsyncWithHttpInfo (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling AboutApi->AboutGetDataViewsForSystemName");

            var localVarPath = "/About/DataViews/Systems/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViewsForSystemName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsDataViewDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewDetails)));
        }

        /// <summary>
        /// Returns version information about the API 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>VersionDetails</returns>
        public VersionDetails AboutGetVersion ()
        {
             ApiResponse<VersionDetails> localVarResponse = AboutGetVersionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns version information about the API 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of VersionDetails</returns>
        public ApiResponse< VersionDetails > AboutGetVersionWithHttpInfo ()
        {

            var localVarPath = "/About/Version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionDetails)));
        }

        /// <summary>
        /// Returns version information about the API 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of VersionDetails</returns>
        public async System.Threading.Tasks.Task<VersionDetails> AboutGetVersionAsync ()
        {
             ApiResponse<VersionDetails> localVarResponse = await AboutGetVersionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns version information about the API 
        /// </summary>
        /// <exception cref="Apteco.OrbitSlackBot.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (VersionDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionDetails>> AboutGetVersionAsyncWithHttpInfo ()
        {

            var localVarPath = "/About/Version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionDetails)));
        }

    }
}
